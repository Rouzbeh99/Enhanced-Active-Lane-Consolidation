*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'permuted.ll'
source_filename = "test.c"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@__const.main.a = private unnamed_addr constant [8 x i32] [i32 1, i32 -1, i32 2, i32 -2, i32 3, i32 -3, i32 4, i32 -4], align 4
@__const.main.b = private unnamed_addr constant [8 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.inc.latchCopy.1.2.3
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %if.then, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %if.then ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  br label %for.inc

loop.permute:                                     ; preds = %for.inc.latchCopy.1.2.3
  %2 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %3 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %1)
  %4 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %1)
  %5 = xor <vscale x 4 x i1> %34, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %6 = xor <vscale x 4 x i1> %34, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %6, <vscale x 4 x i32> %1)
  %9 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %34)
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %9)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %3, <vscale x 4 x i32> %4)
  %12 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %34)
  %13 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %12)
  %14 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %4, <vscale x 4 x i32> %8)
  %15 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %5)
  %16 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %15)
  %17 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %16, <vscale x 4 x i32> %7, <vscale x 4 x i32> %14)
  %18 = xor <vscale x 4 x i1> %16, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %16)
  %20 = sub i64 %12, %15
  %21 = add i64 %20, %19
  %22 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %21)
  %23 = xor <vscale x 4 x i1> %22, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %24 = and <vscale x 4 x i1> %18, %22
  %25 = and <vscale x 4 x i1> %18, %22
  %26 = and <vscale x 4 x i1> %25, %23
  %27 = or <vscale x 4 x i1> %24, %26
  br label %if.then

if.then:                                          ; preds = %loop.permute
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !36
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !38
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !39
  %28 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %34, ptr %arrayidx)
  %29 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %34, ptr %arrayidx3)
  %30 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %29, <vscale x 4 x i32> %28)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %30, <vscale x 4 x i1> %34, ptr %arrayidx5)
  br label %for.body

for.inc:                                          ; preds = %for.body
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1

for.body.headerCopy.1:                            ; preds = %for.inc
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  br label %for.inc.latchCopy.1

for.inc.latchCopy.1:                              ; preds = %for.body.headerCopy.1
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1.2

for.body.headerCopy.1.2:                          ; preds = %for.inc.latchCopy.1
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  br label %for.inc.latchCopy.1.2

for.inc.latchCopy.1.2:                            ; preds = %for.body.headerCopy.1.2
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1.2.3

for.body.headerCopy.1.2.3:                        ; preds = %for.inc.latchCopy.1.2
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  br label %for.inc.latchCopy.1.2.3

for.inc.latchCopy.1.2.3:                          ; preds = %for.body.headerCopy.1.2.3
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %31 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %32 = insertelement <vscale x 4 x i1> %31, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %33 = insertelement <vscale x 4 x i1> %32, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %34 = insertelement <vscale x 4 x i1> %33, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !41
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !45 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !49, metadata !DIExpression()), !dbg !58
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !50, metadata !DIExpression()), !dbg !59
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !54, metadata !DIExpression()), !dbg !60
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !61
  call void @llvm.dbg.declare(metadata ptr %c, metadata !55, metadata !DIExpression()), !dbg !62
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !66
  tail call void @llvm.experimental.noalias.scope.decl(metadata !67), !dbg !66
  tail call void @llvm.experimental.noalias.scope.decl(metadata !69), !dbg !66
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !73
  br label %for.body.i, !dbg !74

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !73
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !75
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !75
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !76

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !77
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !77, !tbaa !78, !alias.scope !63, !noalias !82
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !83
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !83, !tbaa !78, !alias.scope !67, !noalias !84
  %mul.i = mul nsw i32 %1, %0, !dbg !85
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !86
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !87, !tbaa !78, !alias.scope !69, !noalias !88
  br label %for.inc.i, !dbg !89

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !90
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !73
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !91
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !74, !llvm.loop !92

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !94

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !95
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !96
  ret i32 0, !dbg !97

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !56, metadata !DIExpression()), !dbg !98
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !99
  %2 = load i32, ptr %arrayidx, align 4, !dbg !99, !tbaa !78
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !102
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !103
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !56, metadata !DIExpression()), !dbg !98
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !104
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !94, !llvm.loop !105
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #7

; Function Attrs: argmemonly nocallback nofree nosync nounwind readonly willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1>, ptr) #8

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32>, <vscale x 4 x i1>, ptr nocapture) #2

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32, i32) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1>, <vscale x 4 x i1>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

attributes #0 = { argmemonly nofree norecurse nosync nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn "target-features"="+sve,+sve2" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #3 = { nofree nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly "target-features"="+sve,+sve2" }
attributes #5 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #6 = { nofree nounwind "target-features"="+sve,+sve2" }
attributes #7 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #8 = { argmemonly nocallback nofree nosync nounwind readonly willreturn "target-features"="+sve,+sve2" }
attributes #9 = { nocallback nofree nosync nounwind readnone willreturn "target-features"="+sve,+sve2" }
attributes #10 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/home/rouzbeh/Graduate/LLVM/Active-Lane-Conslidation/Transformation Pass/Vectorizer Pass/test", checksumkind: CSK_MD5, checksum: "c5d0df64e1ff873f94aa4d4359d35ec8")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"branch-target-enforcement", i32 0}
!6 = !{i32 8, !"sign-return-address", i32 0}
!7 = !{i32 8, !"sign-return-address-all", i32 0}
!8 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 7, !"PIE Level", i32 2}
!11 = !{i32 7, !"uwtable", i32 2}
!12 = !{i32 7, !"frame-pointer", i32 1}
!13 = !{!"clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)"}
!14 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 3, type: !15, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !20)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17, !17, !19}
!17 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !18)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !{!21, !22, !23, !24, !25}
!21 = !DILocalVariable(name: "a", arg: 1, scope: !14, file: !1, line: 3, type: !17)
!22 = !DILocalVariable(name: "b", arg: 2, scope: !14, file: !1, line: 3, type: !17)
!23 = !DILocalVariable(name: "c", arg: 3, scope: !14, file: !1, line: 3, type: !17)
!24 = !DILocalVariable(name: "n", arg: 4, scope: !14, file: !1, line: 3, type: !19)
!25 = !DILocalVariable(name: "i", scope: !26, file: !1, line: 6, type: !19)
!26 = distinct !DILexicalBlock(scope: !14, file: !1, line: 6, column: 5)
!27 = !DILocation(line: 0, scope: !14)
!28 = !DILocation(line: 0, scope: !26)
!29 = !DILocation(line: 6, column: 23, scope: !30)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 6, column: 5)
!31 = !DILocation(line: 6, column: 5, scope: !26)
!32 = !DILocation(line: 11, column: 1, scope: !14)
!33 = !DILocation(line: 7, column: 19, scope: !34)
!34 = distinct !DILexicalBlock(scope: !35, file: !1, line: 7, column: 13)
!35 = distinct !DILexicalBlock(scope: !30, file: !1, line: 6, column: 33)
!36 = !DILocation(line: 8, column: 20, scope: !37)
!37 = distinct !DILexicalBlock(scope: !34, file: !1, line: 7, column: 25)
!38 = !DILocation(line: 8, column: 27, scope: !37)
!39 = !DILocation(line: 8, column: 13, scope: !37)
!40 = !DILocation(line: 6, column: 28, scope: !30)
!41 = distinct !{!41, !31, !42, !43, !44}
!42 = !DILocation(line: 10, column: 5, scope: !26)
!43 = !{!"llvm.loop.mustprogress"}
!44 = !{!"llvm.loop.unroll.disable"}
!45 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 13, type: !46, scopeLine: 13, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !48)
!46 = !DISubroutineType(types: !47)
!47 = !{!19}
!48 = !{!49, !50, !54, !55, !56}
!49 = !DILocalVariable(name: "n", scope: !45, file: !1, line: 14, type: !19)
!50 = !DILocalVariable(name: "a", scope: !45, file: !1, line: 15, type: !51)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 256, elements: !52)
!52 = !{!53}
!53 = !DISubrange(count: 8)
!54 = !DILocalVariable(name: "b", scope: !45, file: !1, line: 16, type: !51)
!55 = !DILocalVariable(name: "c", scope: !45, file: !1, line: 17, type: !51)
!56 = !DILocalVariable(name: "i", scope: !57, file: !1, line: 21, type: !19)
!57 = distinct !DILexicalBlock(scope: !45, file: !1, line: 21, column: 5)
!58 = !DILocation(line: 0, scope: !45)
!59 = !DILocation(line: 15, column: 9, scope: !45)
!60 = !DILocation(line: 16, column: 9, scope: !45)
!61 = !DILocation(line: 17, column: 5, scope: !45)
!62 = !DILocation(line: 17, column: 9, scope: !45)
!63 = !{!64}
!64 = distinct !{!64, !65, !"foo: %a"}
!65 = distinct !{!65, !"foo"}
!66 = !DILocation(line: 19, column: 5, scope: !45)
!67 = !{!68}
!68 = distinct !{!68, !65, !"foo: %b"}
!69 = !{!70}
!70 = distinct !{!70, !65, !"foo: %c"}
!71 = !DILocation(line: 0, scope: !14, inlinedAt: !72)
!72 = distinct !DILocation(line: 19, column: 5, scope: !45)
!73 = !DILocation(line: 0, scope: !26, inlinedAt: !72)
!74 = !DILocation(line: 6, column: 5, scope: !26, inlinedAt: !72)
!75 = !DILocation(line: 7, column: 19, scope: !34, inlinedAt: !72)
!76 = !DILocation(line: 7, column: 13, scope: !35, inlinedAt: !72)
!77 = !DILocation(line: 8, column: 20, scope: !37, inlinedAt: !72)
!78 = !{!79, !79, i64 0}
!79 = !{!"int", !80, i64 0}
!80 = !{!"omnipotent char", !81, i64 0}
!81 = !{!"Simple C/C++ TBAA"}
!82 = !{!68, !70}
!83 = !DILocation(line: 8, column: 27, scope: !37, inlinedAt: !72)
!84 = !{!64, !70}
!85 = !DILocation(line: 8, column: 25, scope: !37, inlinedAt: !72)
!86 = !DILocation(line: 8, column: 13, scope: !37, inlinedAt: !72)
!87 = !DILocation(line: 8, column: 18, scope: !37, inlinedAt: !72)
!88 = !{!64, !68}
!89 = !DILocation(line: 9, column: 9, scope: !37, inlinedAt: !72)
!90 = !DILocation(line: 6, column: 28, scope: !30, inlinedAt: !72)
!91 = !DILocation(line: 6, column: 23, scope: !30, inlinedAt: !72)
!92 = distinct !{!92, !74, !93, !43, !44}
!93 = !DILocation(line: 10, column: 5, scope: !26, inlinedAt: !72)
!94 = !DILocation(line: 21, column: 5, scope: !57)
!95 = !DILocation(line: 24, column: 5, scope: !45)
!96 = !DILocation(line: 26, column: 1, scope: !45)
!97 = !DILocation(line: 25, column: 5, scope: !45)
!98 = !DILocation(line: 0, scope: !57)
!99 = !DILocation(line: 22, column: 23, scope: !100)
!100 = distinct !DILexicalBlock(scope: !101, file: !1, line: 21, column: 33)
!101 = distinct !DILexicalBlock(scope: !57, file: !1, line: 21, column: 5)
!102 = !DILocation(line: 22, column: 9, scope: !100)
!103 = !DILocation(line: 21, column: 28, scope: !101)
!104 = !DILocation(line: 21, column: 23, scope: !101)
!105 = distinct !{!105, !94, !106, !43, !44}
!106 = !DILocation(line: 23, column: 5, scope: !57)
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.inc.latchCopy.1.2.3
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %if.then, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %if.then ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  br label %for.inc

loop.permute:                                     ; preds = %for.inc.latchCopy.1.2.3
  %2 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %3 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %1)
  %4 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %1)
  %5 = xor <vscale x 4 x i1> %34, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %6 = xor <vscale x 4 x i1> %34, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %6, <vscale x 4 x i32> %1)
  %9 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %34)
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %9)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %3, <vscale x 4 x i32> %4)
  %12 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %34)
  %13 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %12)
  %14 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %4, <vscale x 4 x i32> %8)
  %15 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %5)
  %16 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %15)
  %17 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %16, <vscale x 4 x i32> %7, <vscale x 4 x i32> %14)
  %18 = xor <vscale x 4 x i1> %16, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %2, <vscale x 4 x i1> %16)
  %20 = sub i64 %12, %15
  %21 = add i64 %20, %19
  %22 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %21)
  %23 = xor <vscale x 4 x i1> %22, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %24 = and <vscale x 4 x i1> %18, %22
  %25 = and <vscale x 4 x i1> %18, %22
  %26 = and <vscale x 4 x i1> %25, %23
  %27 = or <vscale x 4 x i1> %24, %26
  br label %if.then

if.then:                                          ; preds = %loop.permute
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !36
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !38
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !39
  %28 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %34, ptr %arrayidx)
  %29 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %34, ptr %arrayidx3)
  %30 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %34, <vscale x 4 x i32> %29, <vscale x 4 x i32> %28)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %30, <vscale x 4 x i1> %34, ptr %arrayidx5)
  br label %for.body

for.inc:                                          ; preds = %for.body
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1

for.body.headerCopy.1:                            ; preds = %for.inc
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  br label %for.inc.latchCopy.1

for.inc.latchCopy.1:                              ; preds = %for.body.headerCopy.1
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1.2

for.body.headerCopy.1.2:                          ; preds = %for.inc.latchCopy.1
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  br label %for.inc.latchCopy.1.2

for.inc.latchCopy.1.2:                            ; preds = %for.body.headerCopy.1.2
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  br label %for.body.headerCopy.1.2.3

for.body.headerCopy.1.2.3:                        ; preds = %for.inc.latchCopy.1.2
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  br label %for.inc.latchCopy.1.2.3

for.inc.latchCopy.1.2.3:                          ; preds = %for.body.headerCopy.1.2.3
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !40
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %31 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %32 = insertelement <vscale x 4 x i1> %31, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %33 = insertelement <vscale x 4 x i1> %32, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %34 = insertelement <vscale x 4 x i1> %33, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !41
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body
}
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  br label %for.body, !dbg !31

; Loop:
for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %0 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %0, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %1 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %0, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %indvars.iv.next.latchCopy.1.2.3, %wide.trip.count, !dbg !29
  %2 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %3 = insertelement <vscale x 4 x i1> %2, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %4 = insertelement <vscale x 4 x i1> %3, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %5 = insertelement <vscale x 4 x i1> %4, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %6 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %7 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %8 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %1)
  %9 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %10 = xor <vscale x 4 x i1> %5, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %1)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %10, <vscale x 4 x i32> %1)
  %13 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %14 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %13)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %7, <vscale x 4 x i32> %8)
  %16 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %5)
  %17 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %16)
  %18 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %17, <vscale x 4 x i32> %8, <vscale x 4 x i32> %12)
  %19 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %9)
  %20 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %19)
  %21 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %20, <vscale x 4 x i32> %11, <vscale x 4 x i32> %18)
  %22 = xor <vscale x 4 x i1> %20, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %6, <vscale x 4 x i1> %20)
  %24 = sub i64 %16, %19
  %25 = add i64 %24, %23
  %26 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %25)
  %27 = xor <vscale x 4 x i1> %26, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %28 = and <vscale x 4 x i1> %22, %26
  %29 = and <vscale x 4 x i1> %22, %26
  %30 = and <vscale x 4 x i1> %29, %27
  %31 = or <vscale x 4 x i1> %28, %30
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %0, !dbg !41
  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %0, !dbg !43
  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %0, !dbg !44
  %32 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx)
  %33 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %5, ptr %arrayidx3)
  %34 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %5, <vscale x 4 x i32> %33, <vscale x 4 x i32> %32)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %34, <vscale x 4 x i1> %5, ptr %arrayidx5)
  br label %for.body

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

; Loop:
for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body

; Exit blocks
for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Simplify the CFG (simplifycfg) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body, label %for.body.i, !dbg !70, !llvm.loop !89

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.inc.i, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !94
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !95
  %2 = load i32, ptr %arrayidx, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !98
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !99
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !94
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !100
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !101, !llvm.loop !102
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Loop Data Prefetch (loop-data-prefetch) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Falkor HW Prefetch Fix (aarch64-falkor-hwpf-fix) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !73
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !80
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %1, %0, !dbg !82
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !83
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !84, !tbaa !75, !alias.scope !65, !noalias !85
  br label %for.inc.i, !dbg !86

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !87
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !88
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !89

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !91

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !92
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !93
  ret i32 0, !dbg !94

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !52, metadata !DIExpression()), !dbg !95
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !96
  %2 = load i32, ptr %arrayidx, align 4, !dbg !96, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !99
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !100
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !52, metadata !DIExpression()), !dbg !95
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !101
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !91, !llvm.loop !102
}
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !82

; Loop:
for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !26, metadata !DIExpression()), !dbg !86
  %arrayidx = getelementptr inbounds [8 x i32], ptr %c, i64 0, i64 %indvars.iv, !dbg !87
  %2 = load i32, ptr %arrayidx, align 4, !dbg !87, !tbaa !64
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !90
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !91
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !26, metadata !DIExpression()), !dbg !86
  %exitcond.not = icmp eq i64 %indvars.iv.next, 8, !dbg !92
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !82, !llvm.loop !93

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !83
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !84
  ret i32 0, !dbg !85
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !82

; Loop:
for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !26, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !86
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !87
  %2 = load i32, ptr %uglygep, align 4, !dbg !87, !tbaa !64
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %2), !dbg !90
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !26, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !86
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !91
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !91
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !82, !llvm.loop !92

; Exit blocks
for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !83
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !84
  ret i32 0, !dbg !85
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !19, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !20, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !24, metadata !DIExpression()), !dbg !30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !31
  call void @llvm.dbg.declare(metadata ptr %c, metadata !25, metadata !DIExpression()), !dbg !32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !32
  tail call void @llvm.experimental.noalias.scope.decl(metadata !33), !dbg !36
  tail call void @llvm.experimental.noalias.scope.decl(metadata !37), !dbg !36
  tail call void @llvm.experimental.noalias.scope.decl(metadata !39), !dbg !36
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !41, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !48, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata ptr %c, metadata !49, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata i32 8, metadata !50, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata i32 0, metadata !51, metadata !DIExpression()), !dbg !55
  br label %for.body.i, !dbg !56

; Loop:
for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !51, metadata !DIExpression()), !dbg !55
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !57
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !57
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !61

if.then.i:                                        ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds i32, ptr @__const.main.a, i64 %indvars.iv.i, !dbg !62
  %0 = load i32, ptr %arrayidx.i, align 4, !dbg !62, !tbaa !64, !alias.scope !33, !noalias !68
  %arrayidx3.i = getelementptr inbounds i32, ptr @__const.main.b, i64 %indvars.iv.i, !dbg !69
  %1 = load i32, ptr %arrayidx3.i, align 4, !dbg !69, !tbaa !64, !alias.scope !37, !noalias !70
  %mul.i = mul nsw i32 %1, %0, !dbg !71
  %arrayidx5.i = getelementptr inbounds i32, ptr %c, i64 %indvars.iv.i, !dbg !72
  store i32 %mul.i, ptr %arrayidx5.i, align 4, !dbg !73, !tbaa !64, !alias.scope !39, !noalias !74
  br label %for.inc.i, !dbg !75

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !76
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !51, metadata !DIExpression()), !dbg !55
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !77
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !56, !llvm.loop !78

; Exit blocks
for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !82
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !19, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !20, metadata !DIExpression()), !dbg !29
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !24, metadata !DIExpression()), !dbg !30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !31
  call void @llvm.dbg.declare(metadata ptr %c, metadata !25, metadata !DIExpression()), !dbg !32
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !32
  tail call void @llvm.experimental.noalias.scope.decl(metadata !33), !dbg !36
  tail call void @llvm.experimental.noalias.scope.decl(metadata !37), !dbg !36
  tail call void @llvm.experimental.noalias.scope.decl(metadata !39), !dbg !36
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !41, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !48, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata ptr %c, metadata !49, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata i32 8, metadata !50, metadata !DIExpression()), !dbg !53
  call void @llvm.dbg.value(metadata i32 0, metadata !51, metadata !DIExpression()), !dbg !55
  br label %for.body.i, !dbg !56

; Loop:
for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !51, metadata !DIExpression()), !dbg !55
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !57
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !57
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !61

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !62
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !62
  %1 = load i32, ptr %uglygep3, align 4, !dbg !62, !tbaa !64, !alias.scope !33, !noalias !68
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !69
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !69
  %3 = load i32, ptr %uglygep2, align 4, !dbg !69, !tbaa !64, !alias.scope !37, !noalias !70
  %mul.i = mul nsw i32 %3, %1, !dbg !71
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !72
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !72
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !72, !tbaa !64, !alias.scope !39, !noalias !73
  br label %for.inc.i, !dbg !74

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !75
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !51, metadata !DIExpression()), !dbg !55
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !76
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !56, !llvm.loop !77

; Exit blocks
for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !81
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup, !dbg !32

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After AArch64 Stack Tagging (aarch64-stack-tagging) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Interleaved Load Combine Pass (interleaved-load-combine) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Type Promotion (type-promotion) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After AArch64 Promote Constant (aarch64-promote-const) ***
; ModuleID = 'permuted.ll'
source_filename = "test.c"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@__const.main.a = private unnamed_addr constant [8 x i32] [i32 1, i32 -1, i32 2, i32 -2, i32 3, i32 -3, i32 4, i32 -4], align 4
@__const.main.b = private unnamed_addr constant [8 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #7

; Function Attrs: argmemonly nocallback nofree nosync nounwind readonly willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1>, ptr) #8

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32>, <vscale x 4 x i1>, ptr nocapture) #2

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32, i32) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1>, <vscale x 4 x i1>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

attributes #0 = { argmemonly nofree norecurse nosync nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn "target-features"="+sve,+sve2" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #3 = { nofree nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly "target-features"="+sve,+sve2" }
attributes #5 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #6 = { nofree nounwind "target-features"="+sve,+sve2" }
attributes #7 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #8 = { argmemonly nocallback nofree nosync nounwind readonly willreturn "target-features"="+sve,+sve2" }
attributes #9 = { nocallback nofree nosync nounwind readnone willreturn "target-features"="+sve,+sve2" }
attributes #10 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/home/rouzbeh/Graduate/LLVM/Active-Lane-Conslidation/Transformation Pass/Vectorizer Pass/test", checksumkind: CSK_MD5, checksum: "c5d0df64e1ff873f94aa4d4359d35ec8")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"branch-target-enforcement", i32 0}
!6 = !{i32 8, !"sign-return-address", i32 0}
!7 = !{i32 8, !"sign-return-address-all", i32 0}
!8 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 7, !"PIE Level", i32 2}
!11 = !{i32 7, !"uwtable", i32 2}
!12 = !{i32 7, !"frame-pointer", i32 1}
!13 = !{!"clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)"}
!14 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 3, type: !15, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !20)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17, !17, !19}
!17 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !18)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !{!21, !22, !23, !24, !25}
!21 = !DILocalVariable(name: "a", arg: 1, scope: !14, file: !1, line: 3, type: !17)
!22 = !DILocalVariable(name: "b", arg: 2, scope: !14, file: !1, line: 3, type: !17)
!23 = !DILocalVariable(name: "c", arg: 3, scope: !14, file: !1, line: 3, type: !17)
!24 = !DILocalVariable(name: "n", arg: 4, scope: !14, file: !1, line: 3, type: !19)
!25 = !DILocalVariable(name: "i", scope: !26, file: !1, line: 6, type: !19)
!26 = distinct !DILexicalBlock(scope: !14, file: !1, line: 6, column: 5)
!27 = !DILocation(line: 0, scope: !14)
!28 = !DILocation(line: 0, scope: !26)
!29 = !DILocation(line: 6, column: 23, scope: !30)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 6, column: 5)
!31 = !DILocation(line: 6, column: 5, scope: !26)
!32 = !DILocation(line: 11, column: 1, scope: !14)
!33 = !DILocation(line: 7, column: 19, scope: !34)
!34 = distinct !DILexicalBlock(scope: !35, file: !1, line: 7, column: 13)
!35 = distinct !DILexicalBlock(scope: !30, file: !1, line: 6, column: 33)
!36 = !DILocation(line: 6, column: 28, scope: !30)
!37 = distinct !{!37, !31, !38, !39, !40}
!38 = !DILocation(line: 10, column: 5, scope: !26)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 13, type: !42, scopeLine: 13, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !44)
!42 = !DISubroutineType(types: !43)
!43 = !{!19}
!44 = !{!45, !46, !50, !51, !52}
!45 = !DILocalVariable(name: "n", scope: !41, file: !1, line: 14, type: !19)
!46 = !DILocalVariable(name: "a", scope: !41, file: !1, line: 15, type: !47)
!47 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 256, elements: !48)
!48 = !{!49}
!49 = !DISubrange(count: 8)
!50 = !DILocalVariable(name: "b", scope: !41, file: !1, line: 16, type: !47)
!51 = !DILocalVariable(name: "c", scope: !41, file: !1, line: 17, type: !47)
!52 = !DILocalVariable(name: "i", scope: !53, file: !1, line: 21, type: !19)
!53 = distinct !DILexicalBlock(scope: !41, file: !1, line: 21, column: 5)
!54 = !DILocation(line: 0, scope: !41)
!55 = !DILocation(line: 15, column: 9, scope: !41)
!56 = !DILocation(line: 16, column: 9, scope: !41)
!57 = !DILocation(line: 17, column: 5, scope: !41)
!58 = !DILocation(line: 17, column: 9, scope: !41)
!59 = !{!60}
!60 = distinct !{!60, !61, !"foo: %a"}
!61 = distinct !{!61, !"foo"}
!62 = !DILocation(line: 19, column: 5, scope: !41)
!63 = !{!64}
!64 = distinct !{!64, !61, !"foo: %b"}
!65 = !{!66}
!66 = distinct !{!66, !61, !"foo: %c"}
!67 = !DILocation(line: 0, scope: !14, inlinedAt: !68)
!68 = distinct !DILocation(line: 19, column: 5, scope: !41)
!69 = !DILocation(line: 0, scope: !26, inlinedAt: !68)
!70 = !DILocation(line: 6, column: 5, scope: !26, inlinedAt: !68)
!71 = !DILocation(line: 7, column: 19, scope: !34, inlinedAt: !68)
!72 = !DILocation(line: 7, column: 13, scope: !35, inlinedAt: !68)
!73 = !DILocation(line: 8, column: 20, scope: !74, inlinedAt: !68)
!74 = distinct !DILexicalBlock(scope: !34, file: !1, line: 7, column: 25)
!75 = !{!76, !76, i64 0}
!76 = !{!"int", !77, i64 0}
!77 = !{!"omnipotent char", !78, i64 0}
!78 = !{!"Simple C/C++ TBAA"}
!79 = !{!64, !66}
!80 = !DILocation(line: 8, column: 27, scope: !74, inlinedAt: !68)
!81 = !{!60, !66}
!82 = !DILocation(line: 8, column: 25, scope: !74, inlinedAt: !68)
!83 = !DILocation(line: 8, column: 18, scope: !74, inlinedAt: !68)
!84 = !{!60, !64}
!85 = !DILocation(line: 9, column: 9, scope: !74, inlinedAt: !68)
!86 = !DILocation(line: 6, column: 28, scope: !30, inlinedAt: !68)
!87 = !DILocation(line: 6, column: 23, scope: !30, inlinedAt: !68)
!88 = distinct !{!88, !70, !89, !39, !40}
!89 = !DILocation(line: 10, column: 5, scope: !26, inlinedAt: !68)
!90 = !DILocation(line: 21, column: 5, scope: !53)
!91 = !DILocation(line: 24, column: 5, scope: !41)
!92 = !DILocation(line: 26, column: 1, scope: !41)
!93 = !DILocation(line: 25, column: 5, scope: !41)
!94 = !DILocation(line: 0, scope: !53)
!95 = !DILocation(line: 22, column: 23, scope: !96)
!96 = distinct !DILexicalBlock(scope: !97, file: !1, line: 21, column: 33)
!97 = distinct !DILexicalBlock(scope: !53, file: !1, line: 21, column: 5)
!98 = !DILocation(line: 22, column: 9, scope: !96)
!99 = !DILocation(line: 21, column: 23, scope: !97)
!100 = distinct !{!100, !90, !101, !39, !40}
!101 = !DILocation(line: 23, column: 5, scope: !53)
*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}
# *** IR Dump After AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %13:gpr64 = COPY $x2
	  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %12:gpr64 = COPY $x1
	  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %11:gpr64 = COPY $x0
	  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

144B	  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
160B	  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
176B	  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
192B	  %20:gpr64all = COPY $xzr
208B	  %16:gpr64all = COPY %20:gpr64all
224B	  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
240B	  B %bb.3, debug-location !31; test.c:6:5

256B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

272B	  RET_ReallyLR debug-location !32; test.c:11:1

288B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

304B	  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
320B	  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
336B	  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
352B	  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
368B	  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
384B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
400B	  %5:zpr = INDEX_II_S 0, 1
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
416B	  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
432B	  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
448B	  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
464B	  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
480B	  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
496B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
512B	  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
528B	  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
544B	  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
560B	  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
592B	  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
608B	  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
624B	  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
640B	  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
656B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
	  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
688B	  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
704B	  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
720B	  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
736B	  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
752B	  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
768B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
784B	  %45:gpr64 = MOVi64imm -1
800B	  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
816B	  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
832B	  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
848B	  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
864B	  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
880B	  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
896B	  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
912B	  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
928B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
944B	  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
960B	  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
976B	  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
992B	  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
1008B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
1024B	  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
1040B	  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
1056B	  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
1072B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
1088B	  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
1104B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
1120B	  B %bb.4, debug-location !31; test.c:6:5

1136B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

1152B	  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
1168B	  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
1184B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
1200B	  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
1216B	  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
1232B	  %8:gpr64all = COPY %67:gpr64sp
1248B	  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
1264B	  %9:gpr64all = COPY %68:gpr64sp
1280B	  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
1296B	  %10:gpr64all = COPY %69:gpr64sp
1312B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %5:zpr = INDEX_II_S 0, 1
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %26:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %31:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %36:gpr64all = IMPLICIT_DEF debug-location !36; test.c:6:28
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %41:zpr = IMPLICIT_DEF debug-location !31; test.c:6:5
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %43:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64, debug-location !31; test.c:6:5
  %47:zpr = DUP_ZR_S killed %46:gpr32sp, debug-location !31; test.c:6:5
  %48:zpr = INDEX_II_S 0, 1, debug-location !31; test.c:6:5
  %49:ppr_3b = PTRUE_S 31, debug-location !31; test.c:6:5
  %50:ppr_3b = CMPEQ_PPzZZ_S killed %49:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %56:ppr_3b = PTRUE_S 1, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), killed %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %0:gpr64 = COPY %19:gpr64, debug-location !31; test.c:6:5
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %0:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0, debug-location !36; test.c:6:28
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp, debug-location !36; test.c:6:28
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub, debug-location !31; test.c:6:5
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0, debug-location !31; test.c:6:5
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common, debug-location !31; test.c:6:5
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0, debug-location !31; test.c:6:5
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common, debug-location !31; test.c:6:5
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0, debug-location !31; test.c:6:5
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common, debug-location !31; test.c:6:5
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0, debug-location !31; test.c:6:5
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %63:gpr64 = SUBSXrr %19:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64 = nsw SUBSXri killed %18:gpr64sp, 4, 0, implicit-def dead $nzcv, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32 = SUBSWri %23:gpr32sp, 1, 0, implicit-def dead $nzcv, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %63:gpr64 = SUBSXrr %19:gpr64, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %63:gpr64 = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %63:gpr64 = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %15:gpr32 = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %21:gpr64 = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %27:gpr64 = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  %32:gpr64 = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  %37:gpr64 = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %63:gpr64 = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %26:gpr64all = IMPLICIT_DEF
  %31:gpr64all = IMPLICIT_DEF
  %36:gpr64all = IMPLICIT_DEF
  %41:zpr = IMPLICIT_DEF
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG undef %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG undef %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG undef %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG undef %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY %20:gpr64all
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG undef %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG undef %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG undef %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY %39:gpr64sp
  %40:zpr = INSERT_SUBREG undef %41:zpr(tied-def 0), %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S %51:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
  %53:zpr = AND_ZI %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S %55:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
  %58:zpr = AND_ZI %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S %60:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
  %62:zpr = AND_ZI %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
  %8:gpr64all = COPY %67:gpr64sp
  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
  %9:gpr64all = COPY %68:gpr64sp
  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
  %10:gpr64all = COPY %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function foo: IsSSA, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY killed $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY killed $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY killed $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY killed $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, killed %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY killed %20:gpr64all
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY killed %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S killed %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %1:gpr64sp = PHI %11:gpr64, %bb.1, %10:gpr64all, %bb.4
  %2:gpr64sp = PHI %12:gpr64, %bb.1, %9:gpr64all, %bb.4
  %3:gpr64sp = PHI %13:gpr64, %bb.1, %8:gpr64all, %bb.4
  %4:gpr64common = PHI %16:gpr64all, %bb.1, %6:gpr64all, %bb.4
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG undef %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG undef %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri killed %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG undef %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri killed %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY killed %39:gpr64sp
  %40:zpr = INSERT_SUBREG undef %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI killed %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S killed %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common
  %53:zpr = AND_ZI killed %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S killed %55:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common
  %58:zpr = AND_ZI killed %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S killed %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common
  %62:zpr = AND_ZI killed %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, killed %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, killed %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri killed %3:gpr64sp, 16, 0
  %8:gpr64all = COPY killed %67:gpr64sp
  %68:gpr64sp = ADDXri killed %2:gpr64sp, 16, 0
  %9:gpr64all = COPY killed %68:gpr64sp
  %69:gpr64sp = ADDXri killed %1:gpr64sp, 16, 0
  %10:gpr64all = COPY killed %69:gpr64sp
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function foo: NoPHIs, TracksLiveness
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY killed $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY killed $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY killed $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY killed $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, killed %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY killed %20:gpr64all
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY killed %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S killed %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  %70:gpr64sp = COPY killed %11:gpr64
  %71:gpr64sp = COPY killed %12:gpr64
  %72:gpr64sp = COPY killed %13:gpr64
  %73:gpr64common = COPY killed %16:gpr64all
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %4:gpr64common = COPY killed %73:gpr64common
  %3:gpr64sp = COPY killed %72:gpr64sp
  %2:gpr64sp = COPY killed %71:gpr64sp
  %1:gpr64sp = COPY killed %70:gpr64sp
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  %25:gpr64 = INSERT_SUBREG undef %26:gpr64all(tied-def 0), killed %24:gpr32sp, %subreg.sub_32, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  %30:gpr64 = INSERT_SUBREG undef %31:gpr64all(tied-def 0), killed %29:gpr32sp, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri killed %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  %35:gpr64 = INSERT_SUBREG undef %36:gpr64all(tied-def 0), killed %34:gpr32common, %subreg.sub_32, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri killed %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY killed %39:gpr64sp
  %40:zpr = INSERT_SUBREG undef %41:zpr(tied-def 0), killed %22:gpr32, %subreg.ssub
  %42:zpr = AND_ZI killed %40:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0
  %52:zpr = CPY_ZPmR_S killed %51:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common
  %53:zpr = AND_ZI killed %52:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0
  %57:zpr = CPY_ZPmR_S killed %55:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common
  %58:zpr = AND_ZI killed %57:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0
  %61:zpr = CPY_ZPmR_S killed %60:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common
  %62:zpr = AND_ZI killed %61:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, killed %65:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, killed %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri killed %3:gpr64sp, 16, 0
  %8:gpr64all = COPY killed %67:gpr64sp
  %68:gpr64sp = ADDXri killed %2:gpr64sp, 16, 0
  %9:gpr64all = COPY killed %68:gpr64sp
  %69:gpr64sp = ADDXri killed %1:gpr64sp, 16, 0
  %10:gpr64all = COPY killed %69:gpr64sp
  %70:gpr64sp = COPY killed %10:gpr64all
  %71:gpr64sp = COPY killed %9:gpr64all
  %72:gpr64sp = COPY killed %8:gpr64all
  %73:gpr64common = COPY killed %6:gpr64all
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $x0, $x1, $x2, $w3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %14:gpr32common = COPY killed $w3
  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  %13:gpr64 = COPY killed $x2
  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  %12:gpr64 = COPY killed $x1
  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  %11:gpr64 = COPY killed $x0
  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %17:gpr32 = ORRWrs $wzr, killed %14:gpr32common, 0, debug-location !29; test.c:6:23
  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
  %20:gpr64all = COPY $xzr
  %16:gpr64all = COPY killed %20:gpr64all
  %43:ppr_3b = PTRUE_S 31
  %45:gpr64 = MOVi64imm -1
  %46:gpr32sp = COPY killed %45.sub_32:gpr64
  %47:zpr = DUP_ZR_S killed %46:gpr32sp
  %48:zpr = INDEX_II_S 0, 1
  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv
  %56:ppr_3b = PTRUE_S 1
  %70:gpr64sp = COPY killed %11:gpr64
  %71:gpr64sp = COPY killed %12:gpr64
  %72:gpr64sp = COPY killed %13:gpr64
  %73:gpr64common = COPY killed %16:gpr64all
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

  %4:gpr64common = COPY killed %73:gpr64common
  %3:gpr64sp = COPY killed %72:gpr64sp
  %2:gpr64sp = COPY killed %71:gpr64sp
  %1:gpr64sp = COPY killed %70:gpr64sp
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
  undef %25.sub_32:gpr64 = COPY killed %24:gpr32sp, debug-location !36; test.c:6:28
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
  undef %30.sub_32:gpr64 = COPY killed %29:gpr32sp, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  %34:gpr32common = SUBWri killed %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
  undef %35.sub_32:gpr64 = COPY killed %34:gpr32common, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %39:gpr64sp = ADDXri killed %4:gpr64common, 4, 0
  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  %6:gpr64all = COPY killed %39:gpr64sp
  undef %40.ssub:zpr = COPY killed %22:gpr32
  %42:zpr = COPY killed %40:zpr
  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv
  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0
  %52:zpr = COPY killed %51:zpr
  %52:zpr = CPY_ZPmR_S %52:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common
  %53:zpr = COPY killed %52:zpr
  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv
  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0
  %57:zpr = COPY killed %55:zpr
  %57:zpr = CPY_ZPmR_S %57:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common
  %58:zpr = COPY killed %57:zpr
  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv
  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0
  %61:zpr = COPY killed %60:zpr
  %61:zpr = CPY_ZPmR_S %61:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common
  %62:zpr = COPY killed %61:zpr
  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv
  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
  %66:zpr = COPY killed %65:zpr
  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), killed %64:zpr
  ST1W_IMM killed %66:zpr, killed %7:ppr_3b, %3:gpr64sp, 0
  %67:gpr64sp = ADDXri killed %3:gpr64sp, 16, 0
  %8:gpr64all = COPY killed %67:gpr64sp
  %68:gpr64sp = ADDXri killed %2:gpr64sp, 16, 0
  %9:gpr64all = COPY killed %68:gpr64sp
  %69:gpr64sp = ADDXri killed %1:gpr64sp, 16, 0
  %10:gpr64all = COPY killed %69:gpr64sp
  %70:gpr64sp = COPY killed %10:gpr64all
  %71:gpr64sp = COPY killed %9:gpr64all
  %72:gpr64sp = COPY killed %8:gpr64all
  %73:gpr64common = COPY killed %6:gpr64all
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY killed $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %13:gpr64 = COPY killed $x2
	  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %12:gpr64 = COPY killed $x1
	  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %11:gpr64 = COPY killed $x0
	  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

144B	  %17:gpr32 = ORRWrs $wzr, killed %14:gpr32common, 0, debug-location !29; test.c:6:23
160B	  %18:gpr64sp = SUBREG_TO_REG 0, killed %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
176B	  %19:gpr64common = nsw SUBXri killed %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
192B	  %20:gpr64all = COPY $xzr
208B	  %16:gpr64all = COPY killed %20:gpr64all
224B	  %43:ppr_3b = PTRUE_S 31
240B	  %45:gpr64 = MOVi64imm -1
256B	  %46:gpr32sp = COPY killed %45.sub_32:gpr64
272B	  %47:zpr = DUP_ZR_S killed %46:gpr32sp
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, killed %48:zpr, killed %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
336B	  %70:gpr64sp = COPY killed %11:gpr64
352B	  %71:gpr64sp = COPY killed %12:gpr64
368B	  %72:gpr64sp = COPY killed %13:gpr64
384B	  %73:gpr64common = COPY killed %16:gpr64all
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

464B	  %4:gpr64common = COPY killed %73:gpr64common
480B	  %3:gpr64sp = COPY killed %72:gpr64sp
496B	  %2:gpr64sp = COPY killed %71:gpr64sp
512B	  %1:gpr64sp = COPY killed %70:gpr64sp
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
544B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
560B	  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
576B	  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
592B	  undef %25.sub_32:gpr64 = COPY killed %24:gpr32sp, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri killed %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
624B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
640B	  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
656B	  undef %30.sub_32:gpr64 = COPY killed %29:gpr32sp, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri killed %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
688B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
704B	  %34:gpr32common = SUBWri killed %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
720B	  undef %35.sub_32:gpr64 = COPY killed %34:gpr32common, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri killed %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

832B	  %39:gpr64sp = ADDXri killed %4:gpr64common, 4, 0
	  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
848B	  %6:gpr64all = COPY killed %39:gpr64sp
864B	  undef %40.ssub:zpr = COPY killed %22:gpr32
880B	  %42:zpr = COPY killed %40:zpr
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %42:zpr, 0, implicit-def dead $nzcv
928B	  %51:zpr = CPY_ZPzI_S killed %44:ppr, 1, 0
944B	  %52:zpr = COPY killed %51:zpr
960B	  %52:zpr = CPY_ZPmR_S %52:zpr(tied-def 0), %50:ppr_3b, killed %28:gpr32common
976B	  %53:zpr = COPY killed %52:zpr
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %53:zpr, 0, implicit-def dead $nzcv
1024B	  %55:zpr = CPY_ZPzI_S killed %54:ppr, 1, 0
1040B	  %57:zpr = COPY killed %55:zpr
1056B	  %57:zpr = CPY_ZPmR_S %57:zpr(tied-def 0), %56:ppr_3b, killed %33:gpr32common
1072B	  %58:zpr = COPY killed %57:zpr
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, killed %58:zpr, 0, implicit-def dead $nzcv
1120B	  %60:zpr = CPY_ZPzI_S killed %59:ppr, 1, 0
1136B	  %61:zpr = COPY killed %60:zpr
1152B	  %61:zpr = CPY_ZPmR_S %61:zpr(tied-def 0), %50:ppr_3b, killed %38:gpr32common
1168B	  %62:zpr = COPY killed %61:zpr
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, killed %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
1232B	  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
1248B	  %66:zpr = COPY killed %65:zpr
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), killed %64:zpr
1280B	  ST1W_IMM killed %66:zpr, killed %7:ppr_3b, %3:gpr64sp, 0
1296B	  %67:gpr64sp = ADDXri killed %3:gpr64sp, 16, 0
1312B	  %8:gpr64all = COPY killed %67:gpr64sp
1328B	  %68:gpr64sp = ADDXri killed %2:gpr64sp, 16, 0
1344B	  %9:gpr64all = COPY killed %68:gpr64sp
1360B	  %69:gpr64sp = ADDXri killed %1:gpr64sp, 16, 0
1376B	  %10:gpr64all = COPY killed %69:gpr64sp
1392B	  %70:gpr64sp = COPY killed %10:gpr64all
1408B	  %71:gpr64sp = COPY killed %9:gpr64all
1424B	  %72:gpr64sp = COPY killed %8:gpr64all
1440B	  %73:gpr64common = COPY killed %6:gpr64all
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %13:gpr64 = COPY $x2
	  DBG_VALUE %13:gpr64, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %12:gpr64 = COPY $x1
	  DBG_VALUE %12:gpr64, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %11:gpr64 = COPY $x0
	  DBG_VALUE %11:gpr64, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

144B	  %17:gpr32 = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
160B	  %18:gpr64sp = SUBREG_TO_REG 0, %17:gpr32, %subreg.sub_32, debug-location !29; test.c:6:23
176B	  %19:gpr64common = nsw SUBXri %18:gpr64sp, 4, 0, debug-location !31; test.c:6:5
192B	  %20:gpr64all = COPY $xzr
208B	  %16:gpr64all = COPY %20:gpr64all
224B	  %43:ppr_3b = PTRUE_S 31
240B	  %45:gpr64 = MOVi64imm -1
256B	  %46:gpr32sp = COPY %45.sub_32:gpr64
272B	  %47:zpr = DUP_ZR_S %46:gpr32sp
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
336B	  %70:gpr64sp = COPY %11:gpr64
352B	  %71:gpr64sp = COPY %12:gpr64
368B	  %72:gpr64sp = COPY %13:gpr64
384B	  %73:gpr64common = COPY %16:gpr64all
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

464B	  %4:gpr64common = COPY %73:gpr64common
480B	  %3:gpr64sp = COPY %72:gpr64sp
496B	  %2:gpr64sp = COPY %71:gpr64sp
512B	  %1:gpr64sp = COPY %70:gpr64sp
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri %4:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
544B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
560B	  %23:gpr32sp = COPY %4.sub_32:gpr64common, debug-location !36; test.c:6:28
576B	  %24:gpr32sp = ADDWri %23:gpr32sp, 1, 0, debug-location !36; test.c:6:28
592B	  undef %25.sub_32:gpr64 = COPY %24:gpr32sp, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri %25:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
624B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
640B	  %29:gpr32sp = ADDWri %23:gpr32sp, 2, 0, debug-location !33; test.c:7:19
656B	  undef %30.sub_32:gpr64 = COPY %29:gpr32sp, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
688B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
704B	  %34:gpr32common = SUBWri %23:gpr32sp, 1, 0, debug-location !33; test.c:7:19
720B	  undef %35.sub_32:gpr64 = COPY %34:gpr32common, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr %19:gpr64common, %4:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

832B	  %39:gpr64sp = ADDXri %4:gpr64common, 4, 0
	  DBG_VALUE %39:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
848B	  %6:gpr64all = COPY %39:gpr64sp
864B	  undef %40.ssub:zpr = COPY %22:gpr32
880B	  %42:zpr = COPY %40:zpr
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %51:zpr = CPY_ZPzI_S %44:ppr, 1, 0
944B	  %52:zpr = COPY %51:zpr
960B	  %52:zpr = CPY_ZPmR_S %52:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
976B	  %53:zpr = COPY %52:zpr
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %55:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1040B	  %57:zpr = COPY %55:zpr
1056B	  %57:zpr = CPY_ZPmR_S %57:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1072B	  %58:zpr = COPY %57:zpr
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %60:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1136B	  %61:zpr = COPY %60:zpr
1152B	  %61:zpr = CPY_ZPmR_S %61:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1168B	  %62:zpr = COPY %61:zpr
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %1:gpr64sp, 0
1232B	  %65:zpr = LD1W_IMM %7:ppr_3b, %2:gpr64sp, 0
1248B	  %66:zpr = COPY %65:zpr
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %3:gpr64sp, 0
1296B	  %67:gpr64sp = ADDXri %3:gpr64sp, 16, 0
1312B	  %8:gpr64all = COPY %67:gpr64sp
1328B	  %68:gpr64sp = ADDXri %2:gpr64sp, 16, 0
1344B	  %9:gpr64all = COPY %68:gpr64sp
1360B	  %69:gpr64sp = ADDXri %1:gpr64sp, 16, 0
1376B	  %10:gpr64all = COPY %69:gpr64sp
1392B	  %70:gpr64sp = COPY %10:gpr64all
1408B	  %71:gpr64sp = COPY %9:gpr64all
1424B	  %72:gpr64sp = COPY %8:gpr64all
1440B	  %73:gpr64common = COPY %6:gpr64all
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %72:gpr64common = COPY $x2
	  DBG_VALUE %72:gpr64common, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %71:gpr64common = COPY $x1
	  DBG_VALUE %71:gpr64common, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %70:gpr64common = COPY $x0
	  DBG_VALUE %70:gpr64common, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

144B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
176B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
224B	  %43:ppr_3b = PTRUE_S 31
240B	  %45:gpr64common = MOVi64imm -1
272B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
384B	  %73:gpr64common = COPY $xzr
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
544B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
624B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
688B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

832B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
	  DBG_VALUE %73:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %72:gpr64common = COPY $x2
	  DBG_VALUE %72:gpr64common, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %71:gpr64common = COPY $x1
	  DBG_VALUE %71:gpr64common, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %70:gpr64common = COPY $x0
	  DBG_VALUE %70:gpr64common, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

144B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
176B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
224B	  %43:ppr_3b = PTRUE_S 31
240B	  %45:gpr64common = MOVi64imm -1
272B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
384B	  %73:gpr64common = COPY $xzr
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
544B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
624B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
688B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit killed $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

832B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
	  DBG_VALUE %73:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
16B	  %14:gpr32common = COPY $w3
	  DBG_VALUE %14:gpr32common, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
32B	  %72:gpr64common = COPY $x2
	  DBG_VALUE %72:gpr64common, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
48B	  %71:gpr64common = COPY $x1
	  DBG_VALUE %71:gpr64common, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
64B	  %70:gpr64common = COPY $x0
	  DBG_VALUE %70:gpr64common, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE %25:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
	  DBG_VALUE %73:gpr64common, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
16B	  %14:gpr32common = COPY $w3
32B	  %72:gpr64common = COPY $x2
48B	  %71:gpr64common = COPY $x1
64B	  %70:gpr64common = COPY $x0
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
16B	  %14:gpr32common = COPY $w3
32B	  %72:gpr64common = COPY $x2
48B	  %71:gpr64common = COPY $x1
64B	  %70:gpr64common = COPY $x0
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
16B	  %14:gpr32common = COPY $w3
32B	  %72:gpr64common = COPY $x2
48B	  %71:gpr64common = COPY $x1
64B	  %70:gpr64common = COPY $x0
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
16B	  %14:gpr32common = COPY $w3
32B	  %72:gpr64common = COPY $x2
48B	  %71:gpr64common = COPY $x1
64B	  %70:gpr64common = COPY $x0
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0 in %11, $x1 in %12, $x2 in %13, $w3 in %14

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $x0, $x1, $x2, $w3
16B	  %14:gpr32common = COPY $w3
32B	  %72:gpr64common = COPY $x2
48B	  %71:gpr64common = COPY $x1
64B	  %70:gpr64common = COPY $x0
80B	  dead $wzr = SUBSWri %14:gpr32common, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

136B	  %73:gpr64common = COPY $xzr
240B	  %45:gpr64common = MOVi64imm -1
248B	  undef %18.sub_32:gpr64common = ORRWrs $wzr, %14:gpr32common, 0, debug-location !29; test.c:6:23
256B	  %19:gpr64common = nsw SUBXri %18:gpr64common, 4, 0, debug-location !31; test.c:6:5
264B	  %43:ppr_3b = PTRUE_S 31
280B	  %47:zpr = DUP_ZR_S %45.sub_32:gpr64common
288B	  %48:zpr = INDEX_II_S 0, 1
304B	  %50:ppr_3b = CMPEQ_PPzZZ_S %43:ppr_3b, %48:zpr, %47:zpr, implicit-def dead $nzcv
320B	  %56:ppr_3b = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)

528B	  dead $xzr = ANDSXri %73:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  undef %25.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 1, 0, debug-location !36; test.c:6:28
584B	  %22:gpr32 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
608B	  dead $xzr = ANDSXri %25:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  undef %30.sub_32:gpr64common = ADDWri %73.sub_32:gpr64common, 2, 0, debug-location !33; test.c:7:19
648B	  %28:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
672B	  dead $xzr = ANDSXri %30:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  undef %35.sub_32:gpr64common = SUBWri %73.sub_32:gpr64common, 1, 0, debug-location !33; test.c:7:19
712B	  %33:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri %35:gpr64common, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  %38:gpr32common = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
768B	  dead $xzr = SUBSXrr %19:gpr64common, %73:gpr64common, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

864B	  undef %42.ssub:zpr = COPY %22:gpr32
896B	  %42:zpr = AND_ZI %42:zpr(tied-def 0), 0
912B	  %44:ppr = CMPNE_PPzZI_S %43:ppr_3b, %42:zpr, 0, implicit-def dead $nzcv
928B	  %53:zpr = CPY_ZPzI_S %44:ppr, 1, 0
960B	  %53:zpr = CPY_ZPmR_S %53:zpr(tied-def 0), %50:ppr_3b, %28:gpr32common
992B	  %53:zpr = AND_ZI %53:zpr(tied-def 0), 0
1008B	  %54:ppr = CMPNE_PPzZI_S %43:ppr_3b, %53:zpr, 0, implicit-def dead $nzcv
1024B	  %58:zpr = CPY_ZPzI_S %54:ppr, 1, 0
1056B	  %58:zpr = CPY_ZPmR_S %58:zpr(tied-def 0), %56:ppr_3b, %33:gpr32common
1088B	  %58:zpr = AND_ZI %58:zpr(tied-def 0), 0
1104B	  %59:ppr = CMPNE_PPzZI_S %43:ppr_3b, %58:zpr, 0, implicit-def dead $nzcv
1120B	  %62:zpr = CPY_ZPzI_S %59:ppr, 1, 0
1152B	  %62:zpr = CPY_ZPmR_S %62:zpr(tied-def 0), %50:ppr_3b, %38:gpr32common
1184B	  %62:zpr = AND_ZI %62:zpr(tied-def 0), 0
1200B	  %7:ppr_3b = CMPNE_PPzZI_S %43:ppr_3b, %62:zpr, 0, implicit-def dead $nzcv
1216B	  %64:zpr = LD1W_IMM %7:ppr_3b, %70:gpr64common, 0
1232B	  %66:zpr = LD1W_IMM %7:ppr_3b, %71:gpr64common, 0
1240B	  %73:gpr64common = ADDXri %73:gpr64common, 4, 0
1264B	  %66:zpr = MUL_ZPmZ_S %7:ppr_3b, %66:zpr(tied-def 0), %64:zpr
1280B	  ST1W_IMM %66:zpr, %7:ppr_3b, %72:gpr64common, 0
1296B	  %72:gpr64common = ADDXri %72:gpr64common, 16, 0
1328B	  %71:gpr64common = ADDXri %71:gpr64common, 16, 0
1360B	  %70:gpr64common = ADDXri %70:gpr64common, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w3, $x0, $x1, $x2
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $w3, $x0, $x1, $x2
136B	  renamable $x8 = COPY $xzr
240B	  renamable $x10 = MOVi64imm -1
248B	  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
256B	  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
264B	  renamable $p0 = PTRUE_S 31
280B	  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
288B	  renamable $z1 = INDEX_II_S 0, 1
304B	  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
320B	  renamable $p2 = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
	  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
	  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
584B	  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
648B	  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
672B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
712B	  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
864B	  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
896B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
912B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
928B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
960B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
992B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1008B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1024B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1056B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
1088B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1104B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1120B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1152B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
1184B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1200B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1216B	  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
1232B	  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
1240B	  renamable $x8 = ADDXri killed renamable $x8, 4, 0
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
1264B	  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
1280B	  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
1296B	  renamable $x2 = ADDXri killed renamable $x2, 16, 0
1328B	  renamable $x1 = ADDXri killed renamable $x1, 16, 0
1360B	  renamable $x0 = ADDXri killed renamable $x0, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w3, $x0, $x1, $x2
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $w3, $x0, $x1, $x2
136B	  renamable $x8 = COPY $xzr
240B	  renamable $x10 = MOVi64imm -1
248B	  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
256B	  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
264B	  renamable $p0 = PTRUE_S 31
280B	  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
288B	  renamable $z1 = INDEX_II_S 0, 1
304B	  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
320B	  renamable $p2 = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
	  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
	  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
584B	  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
648B	  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
672B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
712B	  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
864B	  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
896B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
912B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
928B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
960B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
992B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1008B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1024B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1056B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
1088B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1104B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1120B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1152B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
1184B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1200B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1216B	  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
1232B	  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
1240B	  renamable $x8 = ADDXri killed renamable $x8, 4, 0
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
1264B	  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
1280B	  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
1296B	  renamable $x2 = ADDXri killed renamable $x2, 16, 0
1328B	  renamable $x1 = ADDXri killed renamable $x1, 16, 0
1360B	  renamable $x0 = ADDXri killed renamable $x0, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

0B	bb.0.entry:
	  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
	  liveins: $w3, $x0, $x1, $x2
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
80B	  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
96B	  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
112B	  B %bb.1, debug-location !31; test.c:6:5

128B	bb.1.for.body.preheader:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $w3, $x0, $x1, $x2
136B	  renamable $x8 = COPY $xzr
240B	  renamable $x10 = MOVi64imm -1
248B	  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
256B	  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
264B	  renamable $p0 = PTRUE_S 31
280B	  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
288B	  renamable $z1 = INDEX_II_S 0, 1
304B	  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
320B	  renamable $p2 = PTRUE_S 1
400B	  B %bb.3, debug-location !31; test.c:6:5

416B	bb.2.for.cond.cleanup:
	; predecessors: %bb.0, %bb.3

432B	  RET_ReallyLR debug-location !32; test.c:11:1

448B	bb.3.for.body:
	; predecessors: %bb.1, %bb.4
	  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
	  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
528B	  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
576B	  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
	  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
584B	  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
608B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
640B	  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
648B	  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
672B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
704B	  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
712B	  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
736B	  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
752B	  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
	  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
768B	  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
784B	  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
800B	  B %bb.4, debug-location !31; test.c:6:5

816B	bb.4.loop.permute:
	; predecessors: %bb.3
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
864B	  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
896B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
912B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
928B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
960B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
992B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1008B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1024B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1056B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
1088B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1104B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1120B	  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
1152B	  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
1184B	  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
1200B	  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
1216B	  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
1232B	  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
1240B	  renamable $x8 = ADDXri killed renamable $x8, 4, 0
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
1264B	  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
1280B	  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
1296B	  renamable $x2 = ADDXri killed renamable $x2, 16, 0
1328B	  renamable $x1 = ADDXri killed renamable $x1, 16, 0
1360B	  renamable $x0 = ADDXri killed renamable $x0, 16, 0
1456B	  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.2(0x30000000); %bb.1(62.50%), %bb.2(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.1, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1
  B %bb.3, debug-location !31; test.c:6:5

bb.2.for.cond.cleanup:
; predecessors: %bb.0, %bb.3

  RET_ReallyLR debug-location !32; test.c:11:1

bb.3.for.body:
; predecessors: %bb.1, %bb.4
  successors: %bb.2(0x04000000), %bb.4(0x7c000000); %bb.2(3.12%), %bb.4(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.2, implicit $nzcv, debug-location !31; test.c:6:5
  B %bb.4, debug-location !31; test.c:6:5

bb.4.loop.permute:
; predecessors: %bb.3
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.3

# End machine code for function foo.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET_ReallyLR debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET_ReallyLR debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x8 = COPY $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  renamable $s0 = COPY killed renamable $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET_ReallyLR debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrr $xzr, $xzr
  renamable $x10 = MOVi64imm -1
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = SUBSXrr renamable $x9, renamable $x8, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET_ReallyLR debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z0 = DUP_ZR_S renamable $w10, implicit killed $x10
  renamable $z1 = INDEX_II_S 0, 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv
  renamable $p2 = PTRUE_S 1

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

*** IR Dump After Merge internal globals (global-merge) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}
# *** IR Dump After AArch64 Local Dynamic TLS Access Clean-up (aarch64-local-dynamic-tls-cleanup) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  LIFETIME_START %stack.0.c, debug-location !57; test.c:17:5
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  LIFETIME_END %stack.0.c, debug-location !92; test.c:26:1
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  LIFETIME_START %stack.0.c, debug-location !57; test.c:17:5
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  LIFETIME_END %stack.0.c, debug-location !92; test.c:26:1
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  LIFETIME_START %stack.0.c, debug-location !57; test.c:17:5
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  LIFETIME_END %stack.0.c, debug-location !92; test.c:26:1
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  LIFETIME_START %stack.0.c, debug-location !57; test.c:17:5
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  LIFETIME_END %stack.0.c, debug-location !92; test.c:26:1
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
16B	  LIFETIME_START %stack.0.c, debug-location !57; test.c:17:5
32B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
48B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
64B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
80B	  %6:gpr64all = COPY $xzr
96B	  %4:gpr64all = COPY %6:gpr64all
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

112B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

128B	  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
	  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
144B	  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
160B	  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
176B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

192B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

208B	  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
224B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
240B	  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
256B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
272B	  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
288B	  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
304B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
320B	  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
368B	  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
400B	  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

432B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

448B	  %18:gpr64all = COPY $xzr
464B	  %17:gpr64all = COPY %18:gpr64all
480B	  B %bb.6, debug-location !90; test.c:21:5

496B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

512B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
528B	  %25:gpr32 = MOVi32imm 10
544B	  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
560B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
576B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
592B	  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
608B	  LIFETIME_END %stack.0.c, debug-location !92; test.c:26:1
624B	  %27:gpr32all = COPY $wzr
640B	  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
656B	  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

672B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

688B	  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
704B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
720B	  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
736B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
752B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
848B	  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
880B	  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %26:gpr32all = COPY $w0, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %22:gpr32all = COPY $w0, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Condition Optimizer (aarch64-condopt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Conditional Compares (aarch64-ccmp) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Conditional Branch Tuning (aarch64-cond-br-tuning) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Store Pair Suppression (aarch64-stp-suppress) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 SIMD instructions optimization pass (aarch64-simdinstr-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Stack Tagging PreRA (aarch64-stack-tagging-pre-ra) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX killed %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, debug-location !80; test.c:8:27 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX killed %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  STRWroX killed %13:gpr32, killed %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %20:gpr32 = LDRWroX killed %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 MI Peephole Optimization pass (aarch64-mi-peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  %16:gpr64 = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  %24:gpr64 = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Dead register definitions (aarch64-dead-defs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $w0, implicit-def $sp, implicit-def $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit $x0, implicit $w1, implicit-def $sp, implicit-def $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY killed %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = PHI %4:gpr64all, %bb.0, %1:gpr64all, %bb.3
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, killed %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri killed %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri killed %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY killed %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY killed %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY killed %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = PHI %17:gpr64all, %bb.4, %3:gpr64all, %bb.6
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY killed %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri killed %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri killed %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY killed %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  %28:gpr64common = COPY killed %4:gpr64all

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = COPY killed %28:gpr64common
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, killed %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri killed %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri killed %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  %28:gpr64common = COPY killed %1:gpr64all
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY killed %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  %29:gpr64common = COPY killed %17:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY killed %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY killed %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = COPY killed %29:gpr64common
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY killed %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri killed %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri killed %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  %29:gpr64common = COPY killed %3:gpr64all
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  %6:gpr64all = COPY $xzr
  %4:gpr64all = COPY killed %6:gpr64all
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
  %28:gpr64common = COPY killed %4:gpr64all

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

  %0:gpr64common = COPY killed %28:gpr64common
  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed %13:gpr32, %14:gpr64sp, killed %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

  %15:gpr64sp = nuw nsw ADDXri killed %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  dead $xzr = SUBSXri killed %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  %28:gpr64common = COPY killed %1:gpr64all
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %18:gpr64all = COPY $xzr
  %17:gpr64all = COPY killed %18:gpr64all
  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  %29:gpr64common = COPY killed %17:gpr64all
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %25:gpr32 = MOVi32imm 10
  $w0 = COPY killed %25:gpr32, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  %27:gpr32all = COPY $wzr
  $w0 = COPY killed %27:gpr32all, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

  %2:gpr64common = COPY killed %29:gpr64common
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
  $w1 = COPY killed %20:gpr32, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  %23:gpr64sp = nuw nsw ADDXri killed %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri killed %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  %29:gpr64common = COPY killed %3:gpr64all
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
32B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
48B	  STRQui killed %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
64B	  %6:gpr64all = COPY $xzr
80B	  %4:gpr64all = COPY killed %6:gpr64all
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
128B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
144B	  %28:gpr64common = COPY killed %4:gpr64all

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

176B	  %0:gpr64common = COPY killed %28:gpr64common
	  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
192B	  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
208B	  TBZW killed %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr killed %12:gpr32, killed %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX killed %13:gpr32, %14:gpr64sp, killed %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %15:gpr64sp = nuw nsw ADDXri killed %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
368B	  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri killed %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
400B	  %28:gpr64common = COPY killed %1:gpr64all
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

464B	  %18:gpr64all = COPY $xzr
480B	  %17:gpr64all = COPY killed %18:gpr64all
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
512B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
528B	  %29:gpr64common = COPY killed %17:gpr64all
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
592B	  %25:gpr32 = MOVi32imm 10
608B	  $w0 = COPY killed %25:gpr32, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
656B	  %27:gpr32all = COPY $wzr
672B	  $w0 = COPY killed %27:gpr32all, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

720B	  %2:gpr64common = COPY killed %29:gpr64common
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY killed %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  %23:gpr64sp = nuw nsw ADDXri killed %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
848B	  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri killed %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
880B	  %29:gpr64common = COPY killed %3:gpr64all
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
32B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
48B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
64B	  %6:gpr64all = COPY $xzr
80B	  %4:gpr64all = COPY %6:gpr64all
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
128B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
144B	  %28:gpr64common = COPY %4:gpr64all

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

176B	  %0:gpr64common = COPY %28:gpr64common
	  DBG_VALUE %0:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
192B	  %7:gpr32 = COPY %0.sub_32:gpr64common, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
208B	  TBZW %7:gpr32, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %0:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %15:gpr64sp = nuw nsw ADDXri %0:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %15:gpr64sp, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
368B	  %1:gpr64all = COPY %15:gpr64sp, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %15:gpr64sp, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
400B	  %28:gpr64common = COPY %1:gpr64all
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

464B	  %18:gpr64all = COPY $xzr
480B	  %17:gpr64all = COPY %18:gpr64all
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
512B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
528B	  %29:gpr64common = COPY %17:gpr64all
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
592B	  %25:gpr32 = MOVi32imm 10
608B	  $w0 = COPY %25:gpr32, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
656B	  %27:gpr32all = COPY $wzr
672B	  $w0 = COPY %27:gpr32all, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

720B	  %2:gpr64common = COPY %29:gpr64common
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %2:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE %2:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  %23:gpr64sp = nuw nsw ADDXri %2:gpr64common, 4, 0, debug-location !99; test.c:21:23
848B	  %3:gpr64all = COPY %23:gpr64sp, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %23:gpr64sp, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
880B	  %29:gpr64common = COPY %3:gpr64all
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
32B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
48B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
128B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
144B	  %28:gpr64common = COPY $xzr

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
512B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
528B	  %29:gpr64common = COPY $xzr
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
32B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
48B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b
128B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
144B	  %28:gpr64common = COPY $xzr

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
512B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
528B	  %29:gpr64common = COPY $xzr
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE %28:gpr64common, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE %29:gpr64common, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

8B	  %28:gpr64common = COPY $xzr
12B	  %14:gpr64sp = ADDXri %stack.0.c, 0, 0
16B	  %5:fpr128 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  %9:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui %5:fpr128, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui %5:fpr128, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
112B	  %11:gpr64common = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)

208B	  TBZW %28.sub_32:gpr64common, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

256B	  %8:gpr64 = nuw nsw UBFMXri %28:gpr64common, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  %10:gpr32 = LDRWroX %9:gpr64common, %8:gpr64, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  %12:gpr32 = LDRWroX %11:gpr64common, %8:gpr64, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  %13:gpr32 = nsw MADDWrrr %12:gpr32, %10:gpr32, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX %13:gpr32, %14:gpr64sp, %8:gpr64, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)

352B	  %28:gpr64common = nuw nsw ADDXri %28:gpr64common, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
384B	  dead $xzr = SUBSXri %28:gpr64common, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  %29:gpr64common = COPY $xzr
496B	  %19:gpr64sp = ADDXri %stack.0.c, 0, 0
536B	  %21:gpr64common = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)

736B	  %20:gpr32 = LDRWroX %19:gpr64sp, %29:gpr64common, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY %21:gpr64common, debug-location !98; test.c:22:9
784B	  $w1 = COPY %20:gpr32, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
832B	  %29:gpr64common = nuw nsw ADDXri %29:gpr64common, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri %29:gpr64common, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
8B	  renamable $x8 = COPY $xzr
12B	  renamable $x9 = ADDXri %stack.0.c, 0, 0
16B	  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
112B	  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
	  liveins: $x8, $x9, $x10, $x11
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $x8, $x9, $x10, $x11
256B	  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
	  liveins: $x8, $x9, $x10, $x11
352B	  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  renamable $x20 = COPY $xzr
496B	  renamable $x21 = ADDXri %stack.0.c, 0, 0
536B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
	  liveins: $x19, $x20, $x21
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
8B	  renamable $x8 = COPY $xzr
12B	  renamable $x9 = ADDXri %stack.0.c, 0, 0
16B	  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
112B	  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
	  liveins: $x8, $x9, $x10, $x11
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $x8, $x9, $x10, $x11
256B	  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
	  liveins: $x8, $x9, $x10, $x11
352B	  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  renamable $x20 = COPY $xzr
496B	  renamable $x21 = ADDXri %stack.0.c, 0, 0
536B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
	  liveins: $x19, $x20, $x21
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

0B	bb.0.entry:
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
8B	  renamable $x8 = COPY $xzr
12B	  renamable $x9 = ADDXri %stack.0.c, 0, 0
16B	  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
96B	  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
100B	  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
104B	  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
	  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
	  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
	  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
112B	  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

160B	bb.1.for.body.i:
	; predecessors: %bb.0, %bb.3
	  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
	  liveins: $x8, $x9, $x10, $x11
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
208B	  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
224B	  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

240B	bb.2.if.then.i:
	; predecessors: %bb.1
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $x8, $x9, $x10, $x11
256B	  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
272B	  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
288B	  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
304B	  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
320B	  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

336B	bb.3.for.inc.i:
	; predecessors: %bb.1, %bb.2
	  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
	  liveins: $x8, $x9, $x10, $x11
352B	  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
	  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
384B	  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
416B	  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
432B	  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

448B	bb.4.for.body.preheader:
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

456B	  renamable $x20 = COPY $xzr
496B	  renamable $x21 = ADDXri %stack.0.c, 0, 0
536B	  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
544B	  B %bb.6, debug-location !90; test.c:21:5

560B	bb.5.for.cond.cleanup:
	; predecessors: %bb.6

576B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
608B	  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
624B	  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
640B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
672B	  $w0 = COPY $wzr, debug-location !93; test.c:25:5
688B	  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

704B	bb.6.for.body:
	; predecessors: %bb.4, %bb.6
	  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
	  liveins: $x19, $x20, $x21
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
736B	  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
752B	  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
768B	  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
800B	  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
816B	  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
	  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
832B	  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
864B	  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
896B	  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
912B	  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After AArch64 Redundant Copy Elimination (aarch64-copyelim) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After A57 FP Anti-dependency breaker (aarch64-a57-fp-load-balancing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  renamable $x9 = ADDXri %stack.0.c, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, %stack.0.c, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, %stack.0.c, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE %stack.0.c, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  renamable $x21 = ADDXri %stack.0.c, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]
  B %bb.2, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  B %bb.4, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  renamable $x20 = COPY $xzr
  $x21 = ADDXri $sp, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str
  B %bb.6, debug-location !90; test.c:21:5

bb.5.for.cond.cleanup:
; predecessors: %bb.6

  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

bb.6.for.body:
; predecessors: %bb.4, %bb.6
  successors: %bb.5(0x04000000), %bb.6(0x7c000000); %bb.5(3.12%), %bb.6(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 0, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5
  B %bb.6, debug-location !90; test.c:21:5

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $x20 = COPY $xzr
  $x21 = ADDXri $sp, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $x20 = COPY $xzr
  $x21 = ADDXri $sp, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = COPY $xzr
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  renamable $x20 = COPY $xzr
  $x21 = ADDXri $sp, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = COPY renamable $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = COPY $wzr, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrr $xzr, $xzr
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  renamable $x10 = MOVaddr target-flags(aarch64-page) @__const.main.a, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  renamable $x11 = MOVaddr target-flags(aarch64-page) @__const.main.b, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrr $xzr, $xzr
  $x21 = ADDXri $sp, 0, 0
  renamable $x19 = MOVaddr target-flags(aarch64-page) @.str, target-flags(aarch64-pageoff, aarch64-nc) @.str

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrr $xzr, $x19, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVi32imm 10, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrr $wzr, $wzr, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET_ReallyLR implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 pseudo instruction expansion pass (aarch64-expand-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  STRQui renamable $q0, $sp, 1, debug-location !58 :: (store (s128) into %ir.c + 16); test.c:17:9
  STRQui killed renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 load / store optimization pass (aarch64-ldst-opt) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  STPQi renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 speculation hardening pass (aarch64-speculation-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  STPQi renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 sls hardening pass (aarch64-sls-hardening) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  STPQi renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Falkor HW Prefetch Fix Late Phase (aarch64-falkor-hwpf-fix-late) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi killed $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  STPQi renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After PostRA Machine Instruction Scheduler (postmisched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 1, %bb.1, implicit killed $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Workaround A53 erratum 835769 pass (aarch64-fix-cortex-a53-835769-pass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 Branch Targets (aarch64-branch-targets) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.1

bb.3.for.inc.i:
; predecessors: %bb.1, %bb.2
  successors: %bb.4(0x04000000), %bb.1(0x7c000000); %bb.4(3.12%), %bb.1(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.1.for.body.i:
; predecessors: %bb.0, %bb.3
  successors: %bb.3(0x40000000), %bb.2(0x40000000); %bb.3(50.00%), %bb.2(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.3, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.2.if.then.i:
; predecessors: %bb.1
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.3

bb.4.for.body.preheader:
; predecessors: %bb.3
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Branch relaxation pass (branch-relaxation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After AArch64 Compress Jump Tables (aarch64-jump-tables) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

*** IR Dump After Machine Outliner (machine-outliner) ***
; ModuleID = 'permuted.ll'
source_filename = "test.c"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

@__const.main.a = private unnamed_addr constant [8 x i32] [i32 1, i32 -1, i32 2, i32 -2, i32 3, i32 -3, i32 4, i32 -4], align 4
@__const.main.b = private unnamed_addr constant [8 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], align 4
@.str = private unnamed_addr constant [4 x i8] c"%d \00", align 1

; Function Attrs: argmemonly nofree norecurse nosync nounwind uwtable
define dso_local void @foo(ptr noalias nocapture noundef readonly %a, ptr noalias nocapture noundef readonly %b, ptr noalias nocapture noundef writeonly %c, i32 noundef %n) local_unnamed_addr #0 !dbg !14 {
entry:
  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !28
  %cmp11 = icmp sgt i32 %n, 0, !dbg !29
  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64, !dbg !29
  %0 = add nsw i64 %wide.trip.count, -4, !dbg !31
  br label %for.body, !dbg !31

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void, !dbg !32

for.body:                                         ; preds = %loop.permute, %for.body.preheader
  %lsr.iv3 = phi ptr [ %uglygep4, %loop.permute ], [ %a, %for.body.preheader ]
  %lsr.iv1 = phi ptr [ %uglygep2, %loop.permute ], [ %b, %for.body.preheader ]
  %lsr.iv = phi ptr [ %uglygep, %loop.permute ], [ %c, %for.body.preheader ]
  %1 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %loop.permute ], [ 0, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !28
  %rem15 = and i64 %1, 1, !dbg !33
  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !33
  %2 = call <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)
  %indvars.iv.next = add nuw nsw i64 %1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !25, metadata !DIExpression()), !dbg !28
  %3 = add i64 %1, 1, !dbg !33
  %rem15.headerCopy.1 = and i64 %3, 1, !dbg !33
  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !33
  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1, metadata !25, metadata !DIExpression()), !dbg !28
  %4 = add i64 %1, 2, !dbg !33
  %rem15.headerCopy.1.2 = and i64 %4, 1, !dbg !33
  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64 %indvars.iv.next.latchCopy.1, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2, metadata !25, metadata !DIExpression()), !dbg !28
  %5 = add i64 %1, 3, !dbg !33
  %rem15.headerCopy.1.2.3 = and i64 %5, 1, !dbg !33
  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !33
  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !36
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.latchCopy.1.2.3, metadata !25, metadata !DIExpression()), !dbg !28
  %exitcond.not.latchCopy.1.2.3 = icmp eq i64 %0, %1, !dbg !29
  %6 = insertelement <vscale x 4 x i1> undef, i1 %cmp1.not, i1 false, !dbg !31
  %7 = insertelement <vscale x 4 x i1> %6, i1 %cmp1.not.headerCopy.1, i1 true, !dbg !31
  %8 = insertelement <vscale x 4 x i1> %7, i1 %cmp1.not.headerCopy.1.2, i1 false, !dbg !31
  %9 = insertelement <vscale x 4 x i1> %8, i1 %cmp1.not.headerCopy.1.2.3, i1 true, !dbg !31
  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup, label %loop.permute, !dbg !31, !llvm.loop !37

loop.permute:                                     ; preds = %for.body
  %10 = call <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)
  %11 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %12 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %2)
  %13 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %14 = xor <vscale x 4 x i1> %9, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %15 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %13, <vscale x 4 x i32> %2)
  %16 = call <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1> %14, <vscale x 4 x i32> %2)
  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %18 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %17)
  %19 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %18, <vscale x 4 x i32> %11, <vscale x 4 x i32> %12)
  %20 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %9)
  %21 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %20)
  %22 = call <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1> %21, <vscale x 4 x i32> %12, <vscale x 4 x i32> %16)
  %23 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %13)
  %24 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %23)
  %25 = call <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1> %24, <vscale x 4 x i32> %15, <vscale x 4 x i32> %22)
  %26 = xor <vscale x 4 x i1> %24, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %27 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1> %10, <vscale x 4 x i1> %24)
  %28 = sub i64 %20, %23
  %29 = add i64 %28, %27
  %30 = call <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64 %29)
  %31 = xor <vscale x 4 x i1> %30, shufflevector (<vscale x 4 x i1> insertelement (<vscale x 4 x i1> poison, i1 true, i32 0), <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer)
  %32 = and <vscale x 4 x i1> %26, %30
  %33 = and <vscale x 4 x i1> %26, %30
  %34 = and <vscale x 4 x i1> %33, %31
  %35 = or <vscale x 4 x i1> %32, %34
  %36 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv3)
  %37 = call <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1> %9, ptr %lsr.iv1)
  %38 = call <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1> %9, <vscale x 4 x i32> %37, <vscale x 4 x i32> %36)
  call void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32> %38, <vscale x 4 x i1> %9, ptr %lsr.iv)
  %uglygep = getelementptr i8, ptr %lsr.iv, i64 16
  %uglygep2 = getelementptr i8, ptr %lsr.iv1, i64 16
  %uglygep4 = getelementptr i8, ptr %lsr.iv3, i64 16
  br label %for.body
}

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #3 !dbg !41 {
entry:
  %c = alloca [8 x i32], align 4
  call void @llvm.dbg.value(metadata i32 8, metadata !45, metadata !DIExpression()), !dbg !54
  call void @llvm.dbg.declare(metadata ptr @__const.main.a, metadata !46, metadata !DIExpression()), !dbg !55
  call void @llvm.dbg.declare(metadata ptr @__const.main.b, metadata !50, metadata !DIExpression()), !dbg !56
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %c) #10, !dbg !57
  call void @llvm.dbg.declare(metadata ptr %c, metadata !51, metadata !DIExpression()), !dbg !58
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(32) %c, i8 0, i64 32, i1 false), !dbg !58
  tail call void @llvm.experimental.noalias.scope.decl(metadata !59), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !63), !dbg !62
  tail call void @llvm.experimental.noalias.scope.decl(metadata !65), !dbg !62
  call void @llvm.dbg.value(metadata ptr @__const.main.a, metadata !21, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr @__const.main.b, metadata !22, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 8, metadata !24, metadata !DIExpression()), !dbg !67
  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata !DIExpression()), !dbg !69
  br label %for.body.i, !dbg !70

for.body.i:                                       ; preds = %for.inc.i, %entry
  %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i, %for.inc.i ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv.i, metadata !25, metadata !DIExpression()), !dbg !69
  %rem15.i = and i64 %indvars.iv.i, 1, !dbg !71
  %cmp1.not.i = icmp eq i64 %rem15.i, 0, !dbg !71
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i, !dbg !72

if.then.i:                                        ; preds = %for.body.i
  %0 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !73
  %uglygep3 = getelementptr i8, ptr @__const.main.a, i64 %0, !dbg !73
  %1 = load i32, ptr %uglygep3, align 4, !dbg !73, !tbaa !75, !alias.scope !59, !noalias !79
  %2 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !80
  %uglygep2 = getelementptr i8, ptr @__const.main.b, i64 %2, !dbg !80
  %3 = load i32, ptr %uglygep2, align 4, !dbg !80, !tbaa !75, !alias.scope !63, !noalias !81
  %mul.i = mul nsw i32 %3, %1, !dbg !82
  %4 = shl nuw nsw i64 %indvars.iv.i, 2, !dbg !83
  %uglygep1 = getelementptr i8, ptr %c, i64 %4, !dbg !83
  store i32 %mul.i, ptr %uglygep1, align 4, !dbg !83, !tbaa !75, !alias.scope !65, !noalias !84
  br label %for.inc.i, !dbg !85

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1, !dbg !86
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next.i, metadata !25, metadata !DIExpression()), !dbg !69
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 8, !dbg !87
  br i1 %exitcond.not.i, label %for.body.preheader, label %for.body.i, !dbg !70, !llvm.loop !88

for.body.preheader:                               ; preds = %for.inc.i
  br label %for.body, !dbg !90

for.cond.cleanup:                                 ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10), !dbg !91
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %c) #10, !dbg !92
  ret i32 0, !dbg !93

for.body:                                         ; preds = %for.body.preheader, %for.body
  %lsr.iv = phi i64 [ 0, %for.body.preheader ], [ %lsr.iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value)), !dbg !94
  %uglygep = getelementptr i8, ptr %c, i64 %lsr.iv, !dbg !95
  %5 = load i32, ptr %uglygep, align 4, !dbg !95, !tbaa !75
  %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull @.str, i32 noundef %5), !dbg !98
  call void @llvm.dbg.value(metadata i64 %lsr.iv, metadata !52, metadata !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value)), !dbg !94
  %lsr.iv.next = add nuw nsw i64 %lsr.iv, 4, !dbg !99
  %exitcond.not = icmp eq i64 %lsr.iv.next, 32, !dbg !99
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !dbg !90, !llvm.loop !100
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #6

; Function Attrs: inaccessiblememonly nocallback nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #7

; Function Attrs: argmemonly nocallback nofree nosync nounwind readonly willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.ld1.nxv4i32(<vscale x 4 x i1>, ptr) #8

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.mul.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: argmemonly nocallback nofree nosync nounwind willreturn
declare void @llvm.aarch64.sve.st1.nxv4i32(<vscale x 4 x i32>, <vscale x 4 x i1>, ptr nocapture) #2

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.index.nxv4i32(i32, i32) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.ptrue.nxv4i1(i32 immarg) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.compact.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare i64 @llvm.aarch64.sve.cntp.nxv4i1(<vscale x 4 x i1>, <vscale x 4 x i1>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i1> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.splice.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

; Function Attrs: nocallback nofree nosync nounwind readnone willreturn
declare <vscale x 4 x i32> @llvm.aarch64.sve.sel.nxv4i32(<vscale x 4 x i1>, <vscale x 4 x i32>, <vscale x 4 x i32>) #9

attributes #0 = { argmemonly nofree norecurse nosync nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #1 = { nocallback nofree nosync nounwind readnone speculatable willreturn "target-features"="+sve,+sve2" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #3 = { nofree nounwind uwtable "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #4 = { argmemonly nofree nounwind willreturn writeonly "target-features"="+sve,+sve2" }
attributes #5 = { nofree nounwind "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+neon,+v8a,+sve,+sve2" }
attributes #6 = { nofree nounwind "target-features"="+sve,+sve2" }
attributes #7 = { inaccessiblememonly nocallback nofree nosync nounwind willreturn "target-features"="+sve,+sve2" }
attributes #8 = { argmemonly nocallback nofree nosync nounwind readonly willreturn "target-features"="+sve,+sve2" }
attributes #9 = { nocallback nofree nosync nounwind readnone willreturn "target-features"="+sve,+sve2" }
attributes #10 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/home/rouzbeh/Graduate/LLVM/Active-Lane-Conslidation/Transformation Pass/Vectorizer Pass/test", checksumkind: CSK_MD5, checksum: "c5d0df64e1ff873f94aa4d4359d35ec8")
!2 = !{i32 7, !"Dwarf Version", i32 5}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 8, !"branch-target-enforcement", i32 0}
!6 = !{i32 8, !"sign-return-address", i32 0}
!7 = !{i32 8, !"sign-return-address-all", i32 0}
!8 = !{i32 8, !"sign-return-address-with-bkey", i32 0}
!9 = !{i32 7, !"PIC Level", i32 2}
!10 = !{i32 7, !"PIE Level", i32 2}
!11 = !{i32 7, !"uwtable", i32 2}
!12 = !{i32 7, !"frame-pointer", i32 1}
!13 = !{!"clang version 15.0.0 (https://www.github.com/llvm/llvm-project.git 61baf2ffa7071944c00a0642fdb9ff77d9cff0da)"}
!14 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 3, type: !15, scopeLine: 3, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !20)
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17, !17, !19}
!17 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !18)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !{!21, !22, !23, !24, !25}
!21 = !DILocalVariable(name: "a", arg: 1, scope: !14, file: !1, line: 3, type: !17)
!22 = !DILocalVariable(name: "b", arg: 2, scope: !14, file: !1, line: 3, type: !17)
!23 = !DILocalVariable(name: "c", arg: 3, scope: !14, file: !1, line: 3, type: !17)
!24 = !DILocalVariable(name: "n", arg: 4, scope: !14, file: !1, line: 3, type: !19)
!25 = !DILocalVariable(name: "i", scope: !26, file: !1, line: 6, type: !19)
!26 = distinct !DILexicalBlock(scope: !14, file: !1, line: 6, column: 5)
!27 = !DILocation(line: 0, scope: !14)
!28 = !DILocation(line: 0, scope: !26)
!29 = !DILocation(line: 6, column: 23, scope: !30)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 6, column: 5)
!31 = !DILocation(line: 6, column: 5, scope: !26)
!32 = !DILocation(line: 11, column: 1, scope: !14)
!33 = !DILocation(line: 7, column: 19, scope: !34)
!34 = distinct !DILexicalBlock(scope: !35, file: !1, line: 7, column: 13)
!35 = distinct !DILexicalBlock(scope: !30, file: !1, line: 6, column: 33)
!36 = !DILocation(line: 6, column: 28, scope: !30)
!37 = distinct !{!37, !31, !38, !39, !40}
!38 = !DILocation(line: 10, column: 5, scope: !26)
!39 = !{!"llvm.loop.mustprogress"}
!40 = !{!"llvm.loop.unroll.disable"}
!41 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 13, type: !42, scopeLine: 13, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !44)
!42 = !DISubroutineType(types: !43)
!43 = !{!19}
!44 = !{!45, !46, !50, !51, !52}
!45 = !DILocalVariable(name: "n", scope: !41, file: !1, line: 14, type: !19)
!46 = !DILocalVariable(name: "a", scope: !41, file: !1, line: 15, type: !47)
!47 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 256, elements: !48)
!48 = !{!49}
!49 = !DISubrange(count: 8)
!50 = !DILocalVariable(name: "b", scope: !41, file: !1, line: 16, type: !47)
!51 = !DILocalVariable(name: "c", scope: !41, file: !1, line: 17, type: !47)
!52 = !DILocalVariable(name: "i", scope: !53, file: !1, line: 21, type: !19)
!53 = distinct !DILexicalBlock(scope: !41, file: !1, line: 21, column: 5)
!54 = !DILocation(line: 0, scope: !41)
!55 = !DILocation(line: 15, column: 9, scope: !41)
!56 = !DILocation(line: 16, column: 9, scope: !41)
!57 = !DILocation(line: 17, column: 5, scope: !41)
!58 = !DILocation(line: 17, column: 9, scope: !41)
!59 = !{!60}
!60 = distinct !{!60, !61, !"foo: %a"}
!61 = distinct !{!61, !"foo"}
!62 = !DILocation(line: 19, column: 5, scope: !41)
!63 = !{!64}
!64 = distinct !{!64, !61, !"foo: %b"}
!65 = !{!66}
!66 = distinct !{!66, !61, !"foo: %c"}
!67 = !DILocation(line: 0, scope: !14, inlinedAt: !68)
!68 = distinct !DILocation(line: 19, column: 5, scope: !41)
!69 = !DILocation(line: 0, scope: !26, inlinedAt: !68)
!70 = !DILocation(line: 6, column: 5, scope: !26, inlinedAt: !68)
!71 = !DILocation(line: 7, column: 19, scope: !34, inlinedAt: !68)
!72 = !DILocation(line: 7, column: 13, scope: !35, inlinedAt: !68)
!73 = !DILocation(line: 8, column: 20, scope: !74, inlinedAt: !68)
!74 = distinct !DILexicalBlock(scope: !34, file: !1, line: 7, column: 25)
!75 = !{!76, !76, i64 0}
!76 = !{!"int", !77, i64 0}
!77 = !{!"omnipotent char", !78, i64 0}
!78 = !{!"Simple C/C++ TBAA"}
!79 = !{!64, !66}
!80 = !DILocation(line: 8, column: 27, scope: !74, inlinedAt: !68)
!81 = !{!60, !66}
!82 = !DILocation(line: 8, column: 25, scope: !74, inlinedAt: !68)
!83 = !DILocation(line: 8, column: 18, scope: !74, inlinedAt: !68)
!84 = !{!60, !64}
!85 = !DILocation(line: 9, column: 9, scope: !74, inlinedAt: !68)
!86 = !DILocation(line: 6, column: 28, scope: !30, inlinedAt: !68)
!87 = !DILocation(line: 6, column: 23, scope: !30, inlinedAt: !68)
!88 = distinct !{!88, !70, !89, !39, !40}
!89 = !DILocation(line: 10, column: 5, scope: !26, inlinedAt: !68)
!90 = !DILocation(line: 21, column: 5, scope: !53)
!91 = !DILocation(line: 24, column: 5, scope: !41)
!92 = !DILocation(line: 26, column: 1, scope: !41)
!93 = !DILocation(line: 25, column: 5, scope: !41)
!94 = !DILocation(line: 0, scope: !53)
!95 = !DILocation(line: 22, column: 23, scope: !96)
!96 = distinct !DILexicalBlock(scope: !97, file: !1, line: 21, column: 33)
!97 = distinct !DILexicalBlock(scope: !53, file: !1, line: 21, column: 5)
!98 = !DILocation(line: 22, column: 9, scope: !96)
!99 = !DILocation(line: 21, column: 23, scope: !97)
!100 = distinct !{!100, !90, !101, !39, !40}
!101 = !DILocation(line: 23, column: 5, scope: !53)
# *** IR Dump After Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function foo: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Function Live Ins: $x0, $x1, $x2, $w3

bb.0.entry:
  successors: %bb.1(0x50000000), %bb.4(0x30000000); %bb.1(62.50%), %bb.4(37.50%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $wzr = SUBSWri renamable $w3, 1, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 11, %bb.4, implicit $nzcv, debug-location !31; test.c:6:5

bb.1.for.body.preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $w3, $x0, $x1, $x2
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(), debug-location !27; test.c:0 line no:3
  renamable $x10 = MOVNXi 0, 0
  renamable $w9 = ORRWrs $wzr, killed renamable $w3, 0, implicit-def $x9, debug-location !29; test.c:6:23
  $x8 = ORRXrs $xzr, $xzr, 0
  renamable $x9 = nsw SUBXri killed renamable $x9, 4, 0, debug-location !31; test.c:6:5
  renamable $p0 = PTRUE_S 31
  renamable $z1 = INDEX_II_S 0, 1
  renamable $z0 = DUP_ZR_S killed renamable $w10, implicit $x10
  renamable $p2 = PTRUE_S 1
  renamable $p1 = CMPEQ_PPzZZ_S renamable $p0, killed renamable $z1, killed renamable $z0, implicit-def dead $nzcv

bb.2.for.body:
; predecessors: %bb.1, %bb.3
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
  liveins: $p0, $p1, $p2, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri renamable $x8, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 1, 0, implicit-def $x10, debug-location !36; test.c:6:28
  DBG_VALUE $x10, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $w13 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  DBG_VALUE $noreg, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = ADDWri renamable $w8, 2, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w12 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = SUBWri renamable $w8, 1, 0, implicit-def $x10, debug-location !33; test.c:7:19
  renamable $w11 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  dead $xzr = ANDSXri killed renamable $x10, 4096, implicit-def $nzcv, debug-location !33; test.c:7:19
  renamable $w10 = CSINCWr $wzr, $wzr, 1, implicit killed $nzcv, debug-location !33; test.c:7:19
  $xzr = SUBSXrs renamable $x9, renamable $x8, 0, implicit-def $nzcv, debug-location !31; test.c:6:5
  Bcc 0, %bb.4, implicit killed $nzcv, debug-location !31; test.c:6:5

bb.3.loop.permute:
; predecessors: %bb.2
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $p0, $p1, $p2, $w10, $w11, $w12, $w13, $x0, $x1, $x2, $x8, $x9
  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  $s0 = FMOVWSr killed $w13, implicit-def $z0
  renamable $x8 = ADDXri killed renamable $x8, 4, 0
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !28; test.c:0 line no:6
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w12
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p2, killed renamable $w11
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = CPY_ZPzI_S killed renamable $p3, 1, 0
  renamable $z0 = CPY_ZPmR_S killed renamable $z0(tied-def 0), renamable $p1, killed renamable $w10
  renamable $z0 = AND_ZI killed renamable $z0(tied-def 0), 0
  renamable $p3 = CMPNE_PPzZI_S renamable $p0, killed renamable $z0, 0, implicit-def dead $nzcv
  renamable $z0 = LD1W_IMM renamable $p3, renamable $x0, 0
  renamable $z1 = LD1W_IMM renamable $p3, renamable $x1, 0
  renamable $x1 = ADDXri killed renamable $x1, 16, 0
  DBG_VALUE $x1, $noreg, !"b", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $x0 = ADDXri killed renamable $x0, 16, 0
  DBG_VALUE $x0, $noreg, !"a", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  renamable $z1 = MUL_ZPmZ_S renamable $p3, killed renamable $z1(tied-def 0), killed renamable $z0
  ST1W_IMM killed renamable $z1, killed renamable $p3, renamable $x2, 0
  renamable $x2 = ADDXri killed renamable $x2, 16, 0
  DBG_VALUE $x2, $noreg, !"c", !DIExpression(DW_OP_LLVM_entry_value, 1), debug-location !27; test.c:0 line no:3
  B %bb.2

bb.4.for.cond.cleanup:
; predecessors: %bb.0, %bb.2

  DBG_VALUE $w3, $noreg, !"n", !DIExpression(), debug-location !27; test.c:0 line no:3
  RET undef $lr, debug-location !32; test.c:11:1

# End machine code for function foo.

# *** IR Dump After Insert CFI remember/restore state instructions (cfi-fixup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=32, align=16, at location [SP-80]
  fi#1: size=8, align=8, at location [SP-8]
  fi#2: size=8, align=8, at location [SP-16]
  fi#3: size=8, align=16, at location [SP-32]
  fi#4: size=8, align=8, at location [SP-40]
  fi#5: size=8, align=8, at location [SP-48]

bb.0.entry:
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $lr, $x21, $x19, $x20
  $sp = frame-setup SUBXri $sp, 80, 0
  frame-setup CFI_INSTRUCTION def_cfa_offset 80
  frame-setup STPXi $fp, killed $lr, $sp, 4 :: (store (s64) into %stack.5), (store (s64) into %stack.4)
  frame-setup STRXui killed $x21, $sp, 6 :: (store (s64) into %stack.3)
  frame-setup STPXi killed $x20, killed $x19, $sp, 8 :: (store (s64) into %stack.2), (store (s64) into %stack.1)
  $fp = frame-setup ADDXri $sp, 32, 0
  frame-setup CFI_INSTRUCTION def_cfa $w29, 48
  frame-setup CFI_INSTRUCTION offset $w19, -8
  frame-setup CFI_INSTRUCTION offset $w20, -16
  frame-setup CFI_INSTRUCTION offset $w21, -32
  frame-setup CFI_INSTRUCTION offset $w30, -40
  frame-setup CFI_INSTRUCTION offset $w29, -48
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $q0 = MOVIv2d_ns 0, debug-location !58; test.c:17:9
  $x8 = ORRXrs $xzr, $xzr, 0
  $x9 = ADDXri $sp, 0, 0
  $x10 = ADRP target-flags(aarch64-page) @__const.main.a
  renamable $x10 = ADDXri killed $x10, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.a, 0
  $x11 = ADRP target-flags(aarch64-page) @__const.main.b
  renamable $x11 = ADDXri killed $x11, target-flags(aarch64-pageoff, aarch64-nc) @__const.main.b, 0
  STPQi killed renamable $q0, renamable $q0, $sp, 0, debug-location !58 :: (store (s128) into %ir.c + 16), (store (s128) into %ir.c); test.c:17:9
  DBG_VALUE $noreg, $noreg, !"b", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $noreg, $noreg, !"a", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 0, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  B %bb.2

bb.1.for.inc.i:
; predecessors: %bb.2, %bb.3
  successors: %bb.4(0x04000000), %bb.2(0x7c000000); %bb.4(3.12%), %bb.2(96.88%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x8 = nuw nsw ADDXri killed renamable $x8, 1, 0, debug-location !86; test.c:6:28 @[ test.c:19:5 ]
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  dead $xzr = SUBSXri renamable $x8, 8, 0, implicit-def $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]
  Bcc 0, %bb.4, implicit $nzcv, debug-location !70; test.c:6:5 @[ test.c:19:5 ]

bb.2.for.body.i:
; predecessors: %bb.0, %bb.1
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  TBZW renamable $w8, 0, %bb.1, debug-location !72; test.c:7:13 @[ test.c:19:5 ]

bb.3.if.then.i:
; predecessors: %bb.2
  successors: %bb.1(0x80000000); %bb.1(100.00%)
  liveins: $x8, $x9, $x10, $x11
  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  renamable $x12 = nuw nsw UBFMXri renamable $x8, 62, 61, debug-location !73; test.c:8:20 @[ test.c:19:5 ]
  renamable $w13 = LDRWroX renamable $x10, renamable $x12, 0, 0, debug-location !73 :: (load (s32) from %ir.uglygep3, !tbaa !75, !alias.scope !59, !noalias !79); test.c:8:20 @[ test.c:19:5 ]
  renamable $w14 = LDRWroX renamable $x11, renamable $x12, 0, 0, debug-location !80 :: (load (s32) from %ir.uglygep2, !tbaa !75, !alias.scope !63, !noalias !81); test.c:8:27 @[ test.c:19:5 ]
  renamable $w13 = nsw MADDWrrr killed renamable $w14, killed renamable $w13, $wzr, debug-location !82; test.c:8:25 @[ test.c:19:5 ]
  STRWroX killed renamable $w13, renamable $x9, killed renamable $x12, 0, 0, debug-location !83 :: (store (s32) into %ir.uglygep1, !tbaa !75, !alias.scope !65, !noalias !84); test.c:8:18 @[ test.c:19:5 ]
  B %bb.1

bb.4.for.body.preheader:
; predecessors: %bb.1
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  DBG_VALUE $x8, $noreg, !"i", !DIExpression(), debug-location !69; test.c:0 @[ test.c:19:5 ] line no:6
  DBG_VALUE $sp, $noreg, !"c", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !67; test.c:0 @[ test.c:19:5 ] line no:3
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $x20 = ORRXrs $xzr, $xzr, 0
  $x21 = ADDXri $sp, 0, 0
  $x19 = ADRP target-flags(aarch64-page) @.str
  renamable $x19 = ADDXri killed $x19, target-flags(aarch64-pageoff, aarch64-nc) @.str, 0

bb.5.for.body:
; predecessors: %bb.4, %bb.5
  successors: %bb.6(0x04000000), %bb.5(0x7c000000); %bb.6(3.12%), %bb.5(96.88%)
  liveins: $x19, $x20, $x21
  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $w1 = LDRWroX renamable $x21, renamable $x20, 0, 0, debug-location !95 :: (load (s32) from %ir.uglygep, !tbaa !75); test.c:22:23
  $x0 = ORRXrs $xzr, $x19, 0, debug-location !98; test.c:22:9
  BL @printf, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $x0, implicit killed $w1, implicit-def $sp, implicit-def dead $w0, debug-location !98; test.c:22:9
  DBG_VALUE $x20, $noreg, !"i", !DIExpression(DW_OP_consts, 4, DW_OP_div, DW_OP_consts, 1, DW_OP_plus, DW_OP_stack_value), debug-location !94; test.c:0 line no:21
  renamable $x20 = nuw nsw ADDXri killed renamable $x20, 4, 0, debug-location !99; test.c:21:23
  dead $xzr = SUBSXri renamable $x20, 32, 0, implicit-def $nzcv, debug-location !90; test.c:21:5
  Bcc 1, %bb.5, implicit killed $nzcv, debug-location !90; test.c:21:5

bb.6.for.cond.cleanup:
; predecessors: %bb.5

  DBG_VALUE 8, $noreg, !"n", !DIExpression(), debug-location !54; test.c:0 line no:14
  $w0 = MOVZWi 10, 0, debug-location !91; test.c:24:5
  BL @putchar, <regmask $fp $lr $b8 $b9 $b10 $b11 $b12 $b13 $b14 $b15 $d8 $d9 $d10 $d11 $d12 $d13 $d14 $d15 $h8 $h9 $h10 $h11 $h12 $h13 $h14 $h15 $s8 $s9 $s10 $s11 $s12 $s13 $s14 and 53 more...>, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $sp, implicit-def dead $w0, debug-location !91; test.c:24:5
  $w0 = ORRWrs $wzr, $wzr, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa $wsp, 80, debug-location !93; test.c:25:5
  $x20, $x19 = frame-destroy LDPXi $sp, 8, debug-location !93 :: (load (s64) from %stack.2), (load (s64) from %stack.1); test.c:25:5
  $fp, $lr = frame-destroy LDPXi $sp, 4, debug-location !93 :: (load (s64) from %stack.5), (load (s64) from %stack.4); test.c:25:5
  $x21 = frame-destroy LDRXui $sp, 6, debug-location !93 :: (load (s64) from %stack.3); test.c:25:5
  $sp = frame-destroy ADDXri $sp, 80, 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION def_cfa_offset 0, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w19, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w20, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w21, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w30, debug-location !93; test.c:25:5
  frame-destroy CFI_INSTRUCTION restore $w29, debug-location !93; test.c:25:5
  RET undef $lr, implicit killed $w0, debug-location !93; test.c:25:5

# End machine code for function main.

