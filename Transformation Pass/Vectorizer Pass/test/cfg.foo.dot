digraph "CFG for 'foo' function" {
	label="CFG for 'foo' function";

	Node0x564d3b6eb320 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{entry:\l  call void @llvm.dbg.value(metadata ptr %a, metadata !21, metadata\l... !DIExpression()), !dbg !27\l  call void @llvm.dbg.value(metadata ptr %b, metadata !22, metadata\l... !DIExpression()), !dbg !27\l  call void @llvm.dbg.value(metadata ptr %c, metadata !23, metadata\l... !DIExpression()), !dbg !27\l  call void @llvm.dbg.value(metadata i32 %n, metadata !24, metadata\l... !DIExpression()), !dbg !27\l  call void @llvm.dbg.value(metadata i32 0, metadata !25, metadata\l... !DIExpression()), !dbg !28\l  %cmp11 = icmp sgt i32 %n, 0, !dbg !29\l  br i1 %cmp11, label %for.body.preheader, label %for.cond.cleanup, !dbg !31\l|{<s0>T|<s1>F}}"];
	Node0x564d3b6eb320:s0 -> Node0x564d3b6ed8b0;
	Node0x564d3b6eb320:s1 -> Node0x564d3b6ed9b0;
	Node0x564d3b6ed8b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.body.preheader:                               \l  %wide.trip.count = zext i32 %n to i64, !dbg !29\l  br label %for.body.init.1\l}"];
	Node0x564d3b6ed8b0 -> Node0x564d3b6ee340;
	Node0x564d3b6ee340 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.body.init.1:                                  \l  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata\l... !DIExpression()), !dbg !28\l  %rem15.init.1 = and i64 0, 1, !dbg !32\l  %cmp1.not.init.1 = icmp eq i64 %rem15.init.1, 0, !dbg !32\l  %indvars.iv.next.init.1 = add nuw nsw i64 0, 1, !dbg !35\l  %rem15.headerCopy.1.init.1 = and i64 %indvars.iv.next.init.1, 1, !dbg !32\l  %cmp1.not.headerCopy.1.init.1 = icmp eq i64 %rem15.headerCopy.1.init.1, 0,\l... !dbg !32\l  %indvars.iv.next.latchCopy.1.init.1 = add nuw nsw i64\l... %indvars.iv.next.init.1, 1, !dbg !35\l  %rem15.headerCopy.1.2.init.1 = and i64 %indvars.iv.next.latchCopy.1.init.1,\l... 1, !dbg !32\l  %cmp1.not.headerCopy.1.2.init.1 = icmp eq i64 %rem15.headerCopy.1.2.init.1,\l... 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2.init.1 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.init.1, 1, !dbg !35\l  %rem15.headerCopy.1.2.3.init.1 = and i64\l... %indvars.iv.next.latchCopy.1.2.init.1, 1, !dbg !32\l  %cmp1.not.headerCopy.1.2.3.init.1 = icmp eq i64\l... %rem15.headerCopy.1.2.3.init.1, 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2.3.init.1 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.2.init.1, 1, !dbg !35\l  br label %for.body.init.2\l}"];
	Node0x564d3b6ee340 -> Node0x564d3b6f06e0;
	Node0x564d3b6f06e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.body.init.2:                                  \l  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata\l... !DIExpression()), !dbg !28\l  %rem15.init.2 = and i64 %indvars.iv.next.latchCopy.1.2.3.init.1, 1, !dbg !32\l  %cmp1.not.init.2 = icmp eq i64 %rem15.init.2, 0, !dbg !32\l  %indvars.iv.next.init.2 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.2.3.init.1, 1, !dbg !35\l  %rem15.headerCopy.1.init.2 = and i64 %indvars.iv.next.init.2, 1, !dbg !32\l  %cmp1.not.headerCopy.1.init.2 = icmp eq i64 %rem15.headerCopy.1.init.2, 0,\l... !dbg !32\l  %indvars.iv.next.latchCopy.1.init.2 = add nuw nsw i64\l... %indvars.iv.next.init.2, 1, !dbg !35\l  %rem15.headerCopy.1.2.init.2 = and i64 %indvars.iv.next.latchCopy.1.init.2,\l... 1, !dbg !32\l  %cmp1.not.headerCopy.1.2.init.2 = icmp eq i64 %rem15.headerCopy.1.2.init.2,\l... 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2.init.2 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.init.2, 1, !dbg !35\l  %rem15.headerCopy.1.2.3.init.2 = and i64\l... %indvars.iv.next.latchCopy.1.2.init.2, 1, !dbg !32\l  %cmp1.not.headerCopy.1.2.3.init.2 = icmp eq i64\l... %rem15.headerCopy.1.2.3.init.2, 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2.3.init.2 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.2.init.2, 1, !dbg !35\l  %0 = insertelement \<vscale x 4 x i1\> undef, i1 %cmp1.not.init.1, i64 0\l  %1 = insertelement \<vscale x 4 x i1\> %0, i1 %cmp1.not.headerCopy.1.init.1,\l... i64 1\l  %2 = insertelement \<vscale x 4 x i1\> %1, i1 %cmp1.not.headerCopy.1.2.init.1,\l... i64 2\l  %3 = insertelement \<vscale x 4 x i1\> %2, i1\l... %cmp1.not.headerCopy.1.2.3.init.1, i64 3\l  %4 = insertelement \<vscale x 4 x i1\> undef, i1 %cmp1.not.init.2, i64 0\l  %5 = insertelement \<vscale x 4 x i1\> %4, i1 %cmp1.not.headerCopy.1.init.2,\l... i64 1\l  %6 = insertelement \<vscale x 4 x i1\> %5, i1 %cmp1.not.headerCopy.1.2.init.2,\l... i64 2\l  %7 = insertelement \<vscale x 4 x i1\> %6, i1\l... %cmp1.not.headerCopy.1.2.3.init.2, i64 3\l  %8 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.index.nxv4i32(i32 0, i32 1)\l  %9 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.index.nxv4i32(i32 4, i32 1)\l  br label %for.body\l}"];
	Node0x564d3b6f06e0 -> Node0x564d3b6f2860;
	Node0x564d3b6f0f10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.cond.cleanup.loopexit:                        \l  br label %for.cond.cleanup, !dbg !36\l}"];
	Node0x564d3b6f0f10 -> Node0x564d3b6ed9b0;
	Node0x564d3b6ed9b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{for.cond.cleanup:                                 \l  ret void, !dbg !36\l}"];
	Node0x564d3b6f2860 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body:                                         \l  %10 = phi i64 [ %indvars.iv.next.latchCopy.1.2.3, %new.latch ], [ 0,\l... %for.body.init.2 ]\l  %11 = phi \<vscale x 4 x i32\> [ %70, %new.latch ], [ %8, %for.body.init.2 ]\l  %12 = phi \<vscale x 4 x i1\> [ %71, %new.latch ], [ %3, %for.body.init.2 ]\l  %13 = phi \<vscale x 4 x i32\> [ %72, %new.latch ], [ %9, %for.body.init.2 ]\l  %14 = phi \<vscale x 4 x i1\> [ %73, %new.latch ], [ %7, %for.body.init.2 ]\l  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata\l... !DIExpression()), !dbg !28\l  %rem15 = and i64 %10, 1, !dbg !32\l  %cmp1.not = icmp eq i64 %rem15, 0, !dbg !32\l  %indvars.iv.next = add nuw nsw i64 %10, 1, !dbg !35\l  %rem15.headerCopy.1 = and i64 %indvars.iv.next, 1, !dbg !32\l  %cmp1.not.headerCopy.1 = icmp eq i64 %rem15.headerCopy.1, 0, !dbg !32\l  %indvars.iv.next.latchCopy.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !35\l  %rem15.headerCopy.1.2 = and i64 %indvars.iv.next.latchCopy.1, 1, !dbg !32\l  %cmp1.not.headerCopy.1.2 = icmp eq i64 %rem15.headerCopy.1.2, 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1, 1, !dbg !35\l  %rem15.headerCopy.1.2.3 = and i64 %indvars.iv.next.latchCopy.1.2, 1, !dbg !32\l  %cmp1.not.headerCopy.1.2.3 = icmp eq i64 %rem15.headerCopy.1.2.3, 0, !dbg !32\l  %indvars.iv.next.latchCopy.1.2.3 = add nuw nsw i64\l... %indvars.iv.next.latchCopy.1.2, 1, !dbg !35\l  %15 = sub i64 %wide.trip.count, 3, !dbg !29\l  %exitcond.not.latchCopy.1.2.3 = icmp eq i64\l... %indvars.iv.next.latchCopy.1.2.3, %15, !dbg !29\l  br i1 %exitcond.not.latchCopy.1.2.3, label %for.cond.cleanup.loopexit, label\l... %permute.decision, !dbg !31, !llvm.loop !37\l|{<s0>T|<s1>F}}"];
	Node0x564d3b6f2860:s0 -> Node0x564d3b6f0f10;
	Node0x564d3b6f2860:s1 -> Node0x564d3b6f5230;
	Node0x564d3b6f5230 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{permute.decision:                                 \l  %16 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)\l  %17 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %16, \<vscale\l... x 4 x i1\> %12)\l  %18 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %16, \<vscale\l... x 4 x i1\> %14)\l  %19 = add i64 %17, %18\l  %20 = icmp uge i64 %19, 4\l  br i1 %20, label %lane.gather, label %linearized\l|{<s0>T|<s1>F}}"];
	Node0x564d3b6f5230:s0 -> Node0x564d3b6f5f70;
	Node0x564d3b6f5230:s1 -> Node0x564d3b6f6020;
	Node0x564d3b6f5f70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{lane.gather:                                      \l  %21 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4)\l  %22 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.compact.nxv4i32(\<vscale x 4\l... x i1\> %12, \<vscale x 4 x i32\> %11)\l  %23 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.compact.nxv4i32(\<vscale x 4\l... x i1\> %14, \<vscale x 4 x i32\> %13)\l  %24 = xor \<vscale x 4 x i1\> %12, shufflevector (\<vscale x 4 x i1\>\l... insertelement (\<vscale x 4 x i1\> poison, i1 true, i32 0), \<vscale x 4 x i1\>\l... poison, \<vscale x 4 x i32\> zeroinitializer)\l  %25 = xor \<vscale x 4 x i1\> %14, shufflevector (\<vscale x 4 x i1\>\l... insertelement (\<vscale x 4 x i1\> poison, i1 true, i32 0), \<vscale x 4 x i1\>\l... poison, \<vscale x 4 x i32\> zeroinitializer)\l  %26 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.compact.nxv4i32(\<vscale x 4\l... x i1\> %24, \<vscale x 4 x i32\> %11)\l  %27 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.compact.nxv4i32(\<vscale x 4\l... x i1\> %25, \<vscale x 4 x i32\> %13)\l  %28 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %21, \<vscale\l... x 4 x i1\> %12)\l  %29 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64\l... %28)\l  %30 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.splice.nxv4i32(\<vscale x 4 x\l... i1\> %29, \<vscale x 4 x i32\> %22, \<vscale x 4 x i32\> %23)\l  %31 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %21, \<vscale\l... x 4 x i1\> %14)\l  %32 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64\l... %31)\l  %33 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.splice.nxv4i32(\<vscale x 4 x\l... i1\> %32, \<vscale x 4 x i32\> %23, \<vscale x 4 x i32\> %27)\l  %34 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %21, \<vscale\l... x 4 x i1\> %24)\l  %35 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64\l... %34)\l  %36 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.sel.nxv4i32(\<vscale x 4 x\l... i1\> %35, \<vscale x 4 x i32\> %26, \<vscale x 4 x i32\> %33)\l  %37 = xor \<vscale x 4 x i1\> %35, shufflevector (\<vscale x 4 x i1\>\l... insertelement (\<vscale x 4 x i1\> poison, i1 true, i32 0), \<vscale x 4 x i1\>\l... poison, \<vscale x 4 x i32\> zeroinitializer)\l  %38 = call i64 @llvm.aarch64.sve.cntp.nxv4i1(\<vscale x 4 x i1\> %21, \<vscale\l... x 4 x i1\> %35)\l  %39 = sub i64 %31, %34\l  %40 = add i64 %39, %38\l  %41 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.whilelt.nxv4i1.i64(i64 0, i64\l... %40)\l  %42 = xor \<vscale x 4 x i1\> %41, shufflevector (\<vscale x 4 x i1\>\l... insertelement (\<vscale x 4 x i1\> poison, i1 true, i32 0), \<vscale x 4 x i1\>\l... poison, \<vscale x 4 x i32\> zeroinitializer)\l  %43 = and \<vscale x 4 x i1\> %37, %41\l  %44 = and \<vscale x 4 x i1\> %37, %41\l  %45 = and \<vscale x 4 x i1\> %44, %42\l  %46 = or \<vscale x 4 x i1\> %43, %45\l  br label %if.then\l}"];
	Node0x564d3b6f5f70 -> Node0x564d3b6f8650;
	Node0x564d3b6f6020 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{linearized:                                       \l  %47 = getelementptr inbounds i32, ptr %a, i64 %10, !dbg !41\l  %48 = load i32, ptr %47, align 4, !dbg !41, !tbaa !43\l  %49 = getelementptr inbounds i32, ptr %b, i64 %10, !dbg !47\l  %50 = load i32, ptr %49, align 4, !dbg !47, !tbaa !43\l  %51 = mul nsw i32 %50, %48, !dbg !48\l  %52 = getelementptr inbounds i32, ptr %c, i64 %10, !dbg !49\l  store i32 %51, ptr %52, align 4, !dbg !50, !tbaa !43\l  %53 = insertelement \<vscale x 4 x i1\> undef, i1 %cmp1.not, i1 false\l  %54 = insertelement \<vscale x 4 x i1\> %53, i1 %cmp1.not.headerCopy.1, i1 true\l  %55 = insertelement \<vscale x 4 x i1\> %54, i1 %cmp1.not.headerCopy.1.2, i1\l... false\l  %56 = insertelement \<vscale x 4 x i1\> %55, i1 %cmp1.not.headerCopy.1.2.3, i1\l... true\l  %57 = trunc i64 %10 to i32\l  %58 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.index.nxv4i32(i32 %57, i32 1)\l  br label %new.latch\l}"];
	Node0x564d3b6f6020 -> Node0x564d3b6f32a0;
	Node0x564d3b6f8650 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{if.then:                                          \l  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %10, !dbg !41\l  %arrayidx3 = getelementptr inbounds i32, ptr %b, i64 %10, !dbg !47\l  %arrayidx5 = getelementptr inbounds i32, ptr %c, i64 %10, !dbg !49\l  %59 = call \<vscale x 4 x i1\> @llvm.aarch64.sve.ptrue.nxv4i1(i32 4), !dbg !51\l  %60 = call \<vscale x 4 x i32\>\l... @llvm.aarch64.sve.ld1.gather.sxtw.index.nxv4i32(\<vscale x 4 x i1\> %59, ptr\l... %arrayidx, \<vscale x 4 x i32\> %30), !dbg !51\l  %61 = call \<vscale x 4 x i32\>\l... @llvm.aarch64.sve.ld1.gather.sxtw.index.nxv4i32(\<vscale x 4 x i1\> %59, ptr\l... %arrayidx3, \<vscale x 4 x i32\> %30), !dbg !51\l  %62 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.mul.nxv4i32(\<vscale x 4 x\l... i1\> %59, \<vscale x 4 x i32\> %61, \<vscale x 4 x i32\> %60), !dbg !51\l  call void @llvm.aarch64.sve.st1.scatter.sxtw.nxv4i32(\<vscale x 4 x i32\> %62,\l... \<vscale x 4 x i1\> %59, ptr %arrayidx5, \<vscale x 4 x i32\> %30), !dbg !51\l  %63 = zext \<vscale x 4 x i32\> %30 to \<vscale x 4 x i64\>, !dbg !51\l  call void @llvm.aarch64.sve.st1.scatter.sxtw.nxv4i32(\<vscale x 4 x i32\> %30,\l... \<vscale x 4 x i1\> %59, ptr %arrayidx5, \<vscale x 4 x i32\> %30), !dbg !51\l  %64 = insertelement \<vscale x 4 x i1\> undef, i1 %cmp1.not, i1 false, !dbg !51\l  %65 = insertelement \<vscale x 4 x i1\> %64, i1 %cmp1.not.headerCopy.1, i1\l... true, !dbg !51\l  %66 = insertelement \<vscale x 4 x i1\> %65, i1 %cmp1.not.headerCopy.1.2, i1\l... false, !dbg !51\l  %67 = insertelement \<vscale x 4 x i1\> %66, i1 %cmp1.not.headerCopy.1.2.3, i1\l... true, !dbg !51\l  %68 = trunc i64 %10 to i32, !dbg !51\l  %69 = call \<vscale x 4 x i32\> @llvm.aarch64.sve.index.nxv4i32(i32 %68, i32\l... 1), !dbg !51\l  br label %new.latch, !dbg !51\l}"];
	Node0x564d3b6f8650 -> Node0x564d3b6f32a0;
	Node0x564d3b6f32a0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{new.latch:                                        \l  %70 = phi \<vscale x 4 x i32\> [ %69, %if.then ], [ %11, %linearized ]\l  %71 = phi \<vscale x 4 x i1\> [ %67, %if.then ], [ %12, %linearized ]\l  %72 = phi \<vscale x 4 x i32\> [ %58, %linearized ], [ %13, %if.then ]\l  %73 = phi \<vscale x 4 x i1\> [ %56, %linearized ], [ %46, %if.then ]\l  br label %for.body\l}"];
	Node0x564d3b6f32a0 -> Node0x564d3b6f2860;
}
